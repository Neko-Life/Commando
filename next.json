{"meta":{"generator":"0.11.0","format":20,"date":1640615151636},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"# Commando\n[![Discord](https://discordapp.com/api/guilds/222078108977594368/embed.png)](https://discord.gg/bRCvFy9)\n[![Downloads](https://img.shields.io/npm/dt/discord.js-commando.svg)](https://www.npmjs.com/package/discord.js-commando)\n[![Version](https://img.shields.io/npm/v/discord.js-commando.svg)](https://www.npmjs.com/package/discord.js-commando)\n[![Dependency status](https://david-dm.org/discordjs/Commando.svg)](https://david-dm.org/discordjs/Commando)\n[![Build status](https://travis-ci.org/discordjs/Commando.svg)](https://travis-ci.org/discordjs/Commando)\n\n## About\nCommando is the official command framework for [discord.js](https://github.com/discordjs/discord.js).\nIt is flexible, fully object-oriented, easy to use, and makes it trivial to create your own powerful commands.\nAdditionally, it makes full use of ES2017's `async`/`await` functionality for clear, concise code that is simple to write and easy to comprehend.\n\n### New features in this fork\n\n- Async inhibitors\n- Async provider loading (loading only guilds that are actually needed)\n- Services\n- Aliases for commands\n- Arguments accessible for types\n\n## Features\n- Plain command names and aliases\n- Regular expression triggers\n- Robust parsing of arguments (with \"quoted strings\" support)\n- Sophisticated argument system (optional)\n\t* Automatic prompting for arguments that aren't provided\n\t* Type system with rules, automatic validation, and parsing to usable values\n\t\t- Basic types (string, integer, float, boolean)\n\t\t- Discord objects (user, member, role, channel, message)\n\t\t- User-defined custom types\n\t\t- Union types\n\t* Automatic re-prompting of invalid arguments\n\t* Optional arguments with default values\n\t* Infinite arguments (arguments that accept as many values as provided)\n- Multiple responses to commands\n- Command editing (user edits their message that triggered the command, and the bot's response updates with it)\n- Command reloading, as well as loading/unloading\n- Command throttling/cooldowns\n\n## Installation\n**Node 15.0.0 or newer is required.**  \n`npm install @iceprod/discord.js-commando`\n","path":"docs/general/welcome.md"},"first-steps":{"name":"First steps","type":"md","content":"# First steps\n\nThe first thing you need to do to use Commando is ensure you're creating a [CommandoClient](https://discord.js.org/#/docs/commando/master/class/CommandoClient)\nrather than the regular discord.js [Client](https://discord.js.org/#/docs/main/master/class/Client).\nA CommandoClient is just an extension of the base Client, so all options, properties, methods, and events on Client are also on CommandoClient.\n\nYou should provide the `owner` option to the constructor, which is an option specific to CommandoClient, and should be set to the ID of your Discord user.\nThis will give you full access to control everything about the bot, in any guild.\n\n```javascript\nconst Commando = require(\"@iceprod/discord.js-commando\");\n\nconst client = new Commando.Client({\n    owner: \"1234567890\",\n});\n```\n\nThen, to make use of the command framework (what else would you be doing with Commando?), you need to register your command groups, commands, and argument types,\nin addition to any of the built-in stuff that you want make use of. This will look something like this:\n\n```javascript\nconst path = require(\"path\");\n\nclient.registry\n    // Registers your custom command groups\n    .registerGroups([\n        [\"fun\", \"Fun commands\"],\n        [\"some\", \"Some group\"],\n        [\"other\", \"Some other group\"],\n    ])\n\n    // Registers all built-in groups, commands, services and argument types\n    .registerDefaults()\n\n    // Registers all of your commands in the ./commands/ directory\n    .registerCommandsIn(path.join(__dirname, \"commands\"));\n```\n\nCommando has built-in command prefix configuration per-guild, as well as enabling and disabling commands per-guild.\nIn order for this to persist across restarts, you should use a [SettingProvider](https://discord.js.org/#/docs/commando/master/class/SettingProvider).\nThere is a built-in SQLiteProvider that comes with Commando, which stores all settings in an SQLite3 database.\nTo use it, install the `sqlite` module with NPM (`npm install --save sqlite`). Then, set the provider on the client:\n\n```javascript\nconst sqlite = require(\"sqlite\");\n\nclient\n    .setProvider(\n        sqlite\n        .open(path.join(__dirname, \"settings.sqlite3\"))\n        .then((db) => new Commando.SQLiteProvider(db))\n    )\n    .catch(console.error);\n```\n\nFinally, you must log in, just as if you were using a regular Client.\n\n```javascript\nclient.login(\"token goes here\");\n```\n\nThere is an extremely simple example bot used to test Commando, of which you can view the source [here](https://github.com/discordjs/Commando/tree/master/test).\n","path":"docs/general/first-steps.md"}}},"commands":{"name":"Commands","files":{"creating-new":{"name":"Creating new commands","type":"md","content":"# Creating new commands\n\n> *Note: if you're using VSCode for editing, consider installing the `iceproductions.commando-snippets` extension.*\n\nCommando has an easy way of adding new commands. Once you have the basic `index.js` file (see [welcome](../general/first-steps)), you can\nsimply create new files in the `commands` directory.\n\nThe file paths have the following format: `commands/[group]/[command].js`, where `group` is the group name (the first string in the array, for example\n`fun` in `['fun', 'Fun commands']`) and `command` is the command name. Note that while this format isn't enforced by itself, not using this format will\nprevent the `load`/`unload`/`reload` commands to work.\n\nCommands are classes (each command is in it's own class), and are configured by their constructors. The basic format is\n\n```js\nconst { Command } = require(\"@iceprod/discord.js-commando\");\n\nmodule.exports = class CustomCommand extends Command {\n    constructor(client) {\n        super(client, {\n            // options\n        });\n    }\n\n    run(ctx, args) {\n        // code to run\n    }\n}\n```\n\n## Options\n\nFor the options, you can take a look at the [CommandInfo typedef](https://discordjs.danbulant.eu/#/docs/commando/master/typedef/CommandInfo). Basically, the most basic config is:\n\n```js\n{\n    name: \"custom-command\",\n    memberName: \"custom-command\", // you want this to be same as name\n    group: \"fun\", // this should be the code of group (the first argument). Same as folder name.\n    description: \"My custom command\"\n}\n```\n\nIf you don't set the `args` property, commando will not try to validate the arguments at all. The second argument to run (usually named `args`) will be an array of strings. If you set the `argsType` property to `single`, commando will not parse arguments and just pass everything after the command into `args`. Using this, you can make a simple `say` command like this:\n\n```js\nconst { Command } = require(\"@iceprod/discord.js-commando\");\n\nmodule.exports = class CustomCommand extends Command {\n    constructor(client) {\n        super(client, {\n            name: \"say\",\n            memberName: \"say\",\n            group: \"fun\",\n            description: \"Says the message as the bot\",\n            argsType: \"single\"\n        });\n    }\n\n    run(ctx, args) {\n        return ctx.reply({ content: args, disableMentions: { parse: [] } });\n    }\n}\n```\n\nCommando also shortcuts replies into `say` method of message which tries to send a normal message in the current channel, and if the bot doesn't have permission will DM the user that started the command.\n\n## Comamnd editing\n\nTo support command editing, simply return the message from `run` method. If a message is not returned, commando will ignore message edits.\n\n### Async commands\n\nThe `run` method can be async, in which case the bot will `await` the result (so you can have command editing with `async` commands as well).\n\n### Multiple responses\n\nThe `run` method can also return an array of responses. This can also be mixed with `async` commands.\n\n## Argument parsing and validation\n\nCommando has advanced argument parsing and validation builtin, using the `args` property in command config. The `args` property is an array of objects, where each object specifies the type of a single argument (arguments can be quoted to allow spaces in them). The type definition can be found [here](https://discordjs.danbulant.eu/#/docs/commando/master/typedef/ArgumentInfo). The second parameter to `run` will then have an object with `key` mapped values (where `key` is the `key` in args).\n\nArguments have 2 formats:\n\n* type driven (uses one of the builtin types or a custom defined type):\n\n```js\n{\n    key: \"argument\",\n    type: \"string\",\n    prompt: \"What's the value of argument?\"\n}\n```\n\n* validation driven (each argument has it's own validate and parse methods):\n\n```js\n{\n    key: \"argument\",\n    prompt: \"What's the value of argument?\",\n    parse(val, ctx): { return val },\n    validate(val, ctx): { return !!val }\n}\n```\n\nYou can also mix the arguments (i.e. set `type` but have custom `parse` method) and mix types (using `|`, you can specify fallback types like `integer|string` which will first try to check for integer, and if fails will return the argument as string). If argument is required (`default` property is not set), commando will attempt to ask the user for the value before running the command (if it fails, the command gets cancelled and the `run` method is never called). Parse can return any type which will get saved into the args object.\n\nSimple example sending the tag of the user selected:\n\n```js\nconst { Command } = require(\"@iceprod/discord.js-commando\");\n\nmodule.exports = class CustomCommand extends Command {\n    constructor(client) {\n        super(client, {\n            name: \"tag\",\n            memberName: \"tag\",\n            group: \"fun\",\n            description: \"Says the tag of the selected user\",\n            args: [{\n                type: \"user\",\n                prompt: \"Which user to show the tag of?\",\n                key: \"user\"\n            }]\n        });\n    }\n\n    run(ctx, args) {\n        return ctx.reply({ content: args.user.tag, allowedMentions: { parse: [] } });\n    }\n}\n```\n\nThen simply running `!tag [username]` will show the full tag of given user (named `\"[username]\"`).\n\nSee [CommandoRegistry#registerDefaultTypes](https://discordjs.danbulant.eu/#/docs/commando/master/class/CommandoRegistry?scrollTo=registerDefaultTypes) for list of default types.\n","path":"docs/commands/creating-new.md"},"builtins":{"name":"Built-in commands","type":"md","content":"# Built-in commands\nCommando has built-in commands that should be useful for just about any bot.\n\n## Utility (util)\n### help (util:help)\nIf no arguments are specified, the command displays a list of all commands available in the current context.\nIn order for a command to be displayed, it must be enabled in the guild (or global), and the user must have permission to use it.\nPassing the `all` argument will list all commands, regardless of context.\nPassing anything else will search for any commands that match, and display detailed information if only one is found.\n\n### ping (util:ping)\nThe ping command will send a message, then edit it to contain the amount of time it took.\nIt also displays the client's heartbeat ping.\n\n### prefix (util:prefix)\nThis command, if not provided with any arguments, will display the current command prefix, and how to use commands.\nIf the command is used in a guild channel and an argument is specified, it will set the command prefix for the guild if the user is a guild admin, or the bot owner,\nIf the command is used in a DM and an argument is specified, it will set the global default command prefix if the user is the bot owner.\n\n### eval (util:eval)\nThe eval command will allow the bot owner to evaluate any JavaScript code, and display its result.\nIt will automatically hide the bot's token/email/password in the output.\nCaution should still be taken, however, as you could potentially break your running bot with it.\n\nIn the script, `this` will refer to the Command instance.\nThere are several shortcut variables and helpers that are also available:\n\n| Name             | Type     | Description                                                                        |\n|------------------|----------|------------------------------------------------------------------------------------|\n| `message`, `msg` | Variable | The message that triggered the command                                             |\n| `client`         | Variable | Shortcut to `this.client`                                                          |\n| `objects`        | Variable | Shortcut to `this.client.registry.evalObjects`                                     |\n| `lastResult`     | Variable | Shortcut to `this.lastResult` (the previous `eval` result value)                   |\n| `doReply(val)`   | Function | Sends another detailed message with any value to display. Useful for callbacks.    |\n\n## Command state (commands)\n### enable (commands:enable)\nEnables a command/group in the current guild if the user is an admin or the bot owner.\nIf used in a DM, enables the command/group globally by default if the user is the bot owner.\n\n### disable (commands:disable)\nDisables a command/group in the current guild if the user is an admin or the bot owner.\nIf used in a DM, disables the command/group globally by default if the user is the bot owner.\n\n### reload (commands:reload)\nReloads a command, or all commands in a group, if the user is the bot owner.\n\n### load (commands:load)\nLoads a command if the user is the bot owner. The command must be specified as the full name (`group:memberName`).\nBuilt-in commands cannot be loaded.\n\n### unload (commands:unload)\nUnloads a command if the user is the bot owner.\nBuilt-in commands cannot be unloaded.\n\n### groups (commands:groups)\nLists all command groups if the user is an admin of the current guild, or the bot owner.\n","path":"docs/commands/builtins.md"},"slash":{"name":"Slash commands","type":"md","content":"# Slash commands\n\nSlash commands are now supported in Commando. There are, however, number of changes (and downgrades).\n\n## Known limitations\n\n* Global commands take an hour to spread out. When working on the bot, use guild registration instead, as these are nearly instant.\n* There's a limit of 100 global commands. Commando currently doesn't support mixing guild and global commands, so you can't take advantage of 100 per-guild commands.\n* There's a limit of 5 user menu commands, and 5 message menu commands.\n* Bots still need the message intent, so that Commando can ask for clarification.\n* Types need changes. Default commando types already support slash commands, but if you're using custom commands, you might need to change that.\n* Union arguments are not supported.\n\n## Defining types\n\nThere are 2 changes for slash command-compatible types:\n\nThe first one is the third option for the `super` call in constructor. The types need at least the `type` to be set to one of the [Discord slash command types](https://discord.com/developers/docs/interactions/application-commands#application-command-object-application-command-option-type). Subcommands are supported through the `options` property.\n\n```js\nconstructor(client) {\n    super(client, \"example\", {\n        type: \"STRING\"\n    });\n}\n```\n\nSee the [documentation for SlashOptions](#docs/commando/next/typedefs/SlashOptions) for the docs about this object.\n\nAutocomplete is supported, by setting the `autocomplete: true` in the SlashOption object, and then adding an `autocomplete` method to the type. It takes an interaction, and should return an array of objects `{ name: string, value: string }`.\n\nThe second change that's required for types is `commandConvert`, which takes the Discord object (like `user` for `USER` type) and should return what the types `parse`r is supposed to return. When using slash commands, types `parse` and `validate` are skipped.\n\n## Defining commands\n\nCommands should, in a perfect world, require just adding `command: true` (or to be more explicit, `command: \"slash\"`) to their definitions.\n\nIn reality, you might be using custom types, and may not be used to working with Context.\n\n### Base definition\n\nJust add `command: \"slash\"` (or it's shorthand format, `command: true`) to their definition. All other fields should be autocompleted by commando correctly.\n\nSetting a different name, different description or using a space in command name is currently not supported in Commando.\n\nIf you want to have it used as just a command (may be useful for example with message menus), add `commandOnly: true` which prevents the default handling triggering the command (with prefix, ping or in DM). Patterns will still trigger the command though.\n\n## Context\n\nContext is a special object that's passed by Commando to commands instead of Message. This makes Commands more portable by default between slash commands and normal message commands. Preffered abbreviation is `ctx`, but you're free to use whatever you use.\n\nIt can be obtained using `Context.extend(message)` (for use within services or custom message handlers). Extenders are cached, so that calls to extend the same message will return the same object (although the Contexts are garbage collected along with Messages).\n\nContext contains shared fields between message and interactions.\n\nSee the [documentation for Context](#docs/commando/next/class/Context) for more info about what it contains.\n\n<info>Since discord.js no longer supports structures, Commando can't extend Message or Guild. To get the CommandoGuild for settings, use `contextGuild` on `Context`, or use `CommandoGuild.extend(guild)`.</info>\n","path":"docs/commands/slash.md"}}}},"classes":[{"name":"CommandoClient","description":"Discord.js Client with a command framework","extends":[[["Client"]]],"construct":{"name":"CommandoClient","params":[{"name":"options","description":"Options for the client","optional":true,"type":[[["CommandoClientOptions"]]]}]},"props":[{"name":"registry","description":"The client's command registry","type":[[["CommandoRegistry"]]],"meta":{"line":70,"file":"client.js","path":"src"}},{"name":"dispatcher","description":"The client's command dispatcher","type":[[["CommandDispatcher"]]],"meta":{"line":76,"file":"client.js","path":"src"}},{"name":"provider","description":"The client's setting provider","nullable":true,"type":[[["SettingProvider"]]],"meta":{"line":82,"file":"client.js","path":"src"}},{"name":"settings","description":"Shortcut to use setting provider methods for the global settings","type":[[["GuildSettingsHelper"]]],"meta":{"line":88,"file":"client.js","path":"src"}},{"name":"_commandPrefix","description":"Internal global command prefix, controlled by the {@link CommandoClient#commandPrefix} getter/setter","access":"private","nullable":true,"type":[[["string"]]],"meta":{"line":95,"file":"client.js","path":"src"}},{"name":"commandPrefix","description":"Global command prefix. An empty string indicates that there is no default prefix, and only mentions will be used.\nSetting to `null` means that the default prefix from {@link CommandoClient#options} will be used instead.","type":[[["string"]]],"meta":{"line":191,"file":"client.js","path":"src"}},{"name":"owners","description":"Owners of the bot, set by the {@link CommandoClientOptions#owner} option\n<info>If you simply need to check if a user is an owner of the bot, please instead use\n{@link CommandoClient#isOwner}.</info>","readonly":true,"nullable":true,"type":[[["Array","<"],["User",">"]]],"meta":{"line":208,"file":"client.js","path":"src"}}],"methods":[{"name":"isOwner","description":"Checks whether a user is an owner of the bot (in {@link CommandoClientOptions#owner})","params":[{"name":"user","description":"User to check for ownership","type":[[["UserResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":221,"file":"client.js","path":"src"}},{"name":"setProvider","description":"Sets the setting provider to use, and initialises it once the client is ready","params":[{"name":"provider","description":"Provider to use","type":[[["SettingProvider"]],[["Promise","<"],["SettingProvider",">"]]]}],"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":236,"file":"client.js","path":"src"}},{"name":"destroy","description":"Destroys the client and clears up memory.","async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":269,"file":"client.js","path":"src"}}],"events":[{"name":"providerReady","description":"Emitted upon the client's provider finishing initialisation","params":[{"name":"provider","description":"Provider that was initialised","type":[[["SettingProvider"]]]}],"meta":{"line":255,"file":"client.js","path":"src"}},{"name":"unknownCommand","description":"Emitted when an unknown command is triggered","params":[{"name":"message","description":"Command message that triggered the command","type":[[["CommandoMessage"]]]}],"meta":{"line":136,"file":"dispatcher.js","path":"src"}},{"name":"groupRegister","description":"Emitted when a group is registered","params":[{"name":"group","description":"Group that was registered","type":[[["CommandGroup"]]]},{"name":"registry","description":"Registry that the group was registered to","type":[[["CommandoRegistry"]]]}],"meta":{"line":139,"file":"registry.js","path":"src"}},{"name":"commandRegister","description":"Emitted when a command is registered","params":[{"name":"command","description":"Command that was registered","type":[[["Command"]]]},{"name":"registry","description":"Registry that the command was registered to","type":[[["CommandoRegistry"]]]}],"meta":{"line":214,"file":"registry.js","path":"src"}},{"name":"typeRegister","description":"Emitted when an argument type is registered","params":[{"name":"type","description":"Argument type that was registered","type":[[["ArgumentType"]]]},{"name":"registry","description":"Registry that the type was registered to","type":[[["CommandoRegistry"]]]}],"meta":{"line":290,"file":"registry.js","path":"src"}},{"name":"commandReregister","description":"Emitted when a command is reregistered","params":[{"name":"newCommand","description":"New command","type":[[["Command"]]]},{"name":"oldCommand","description":"Old command","type":[[["Command"]]]}],"meta":{"line":469,"file":"registry.js","path":"src"}},{"name":"commandUnregister","description":"Emitted when a command is unregistered","params":[{"name":"command","description":"Command that was unregistered","type":[[["Command"]]]}],"meta":{"line":488,"file":"registry.js","path":"src"}},{"name":"serviceLoad","description":"Fired whenever a new service is registered and loaded","params":[{"name":"service","description":"The service that got loaded.","type":[[["Service"]]]}],"meta":{"line":622,"file":"registry.js","path":"src"}},{"name":"serviceLoadError","description":"Emitted when a service fails to load","params":[{"name":"err","description":"The error","type":[[["Error"]]]},{"name":"Service","description":"The service class (not an instance)","type":[[["Service"]]]}],"meta":{"line":664,"file":"registry.js","path":"src"}},{"name":"commandBlock","description":"Emitted when a command is prevented from running","params":[{"name":"message","description":"Command message that the command is running from","type":[[["CommandoMessage"]]]},{"name":"reason","description":"Reason that the command was blocked\n(built-in reasons are `guildOnly`, `nsfw`, `permission`, `throttling`, and `clientPermissions`)","type":[[["string"]]]},{"name":"data","description":"Additional data associated with the block. Built-in reason data properties:\n- guildOnly: none\n- nsfw: none\n- permission: `response` ({@link string}) to send\n- throttling: `throttle` ({@link Object}), `remaining` ({@link number}) time in seconds\n- clientPermissions: `missing` ({@link Array}<{@link string}>) permission names","optional":true,"type":[[["Object"]]]}],"meta":{"line":225,"file":"context.js","path":"src/extensions"}},{"name":"commandCancel","description":"Emitted when a command is cancelled (either by typing 'cancel' or not responding in time)","params":[{"name":"command","description":"Command that was cancelled","type":[[["Command"]]]},{"name":"reason","description":"Reason for the command being cancelled","type":[[["string"]]]},{"name":"message","description":"Command message that the command ran from (see {@link Command#run})","type":[[["CommandoMessage"]]]},{"name":"result","description":"Result from obtaining the arguments from the collector\n(if applicable - see {@link Command#run})","nullable":true,"type":[[["ArgumentCollectorResult"]]]}],"meta":{"line":299,"file":"context.js","path":"src/extensions"}},{"name":"commandRun","description":"Emitted when running a command","params":[{"name":"command","description":"Command that is being run","type":[[["Command"]]]},{"name":"promise","description":"Promise for the command result","type":[[["Promise"]]]},{"name":"message","description":"Command message that the command is running from (see {@link Command#run})","type":[[["CommandoMessage"]]]},{"name":"args","description":"Arguments for the command (see {@link Command#run})","type":[[["Object"]],[["string"]],[["Array","<"],["string",">"]]]},{"name":"fromPattern","description":"Whether the args are pattern matches (see {@link Command#run})","type":[[["boolean"]]]},{"name":"result","description":"Result from obtaining the arguments from the collector\n(if applicable - see {@link Command#run})","nullable":true,"type":[[["ArgumentCollectorResult"]]]}],"meta":{"line":326,"file":"context.js","path":"src/extensions"}},{"name":"commandError","description":"Emitted when a command produces an error while running","params":[{"name":"command","description":"Command that produced an error","type":[[["Command"]]]},{"name":"err","description":"Error that was thrown","type":[[["Error"]]]},{"name":"message","description":"Command message that the command is running from (see {@link Command#run})","type":[[["CommandoMessage"]]]},{"name":"args","description":"Arguments for the command (see {@link Command#run})","type":[[["Object"]],[["string"]],[["Array","<"],["string",">"]]]},{"name":"fromPattern","description":"Whether the args are pattern matches (see {@link Command#run})","type":[[["boolean"]]]},{"name":"result","description":"Result from obtaining the arguments from the collector\n(if applicable - see {@link Command#run})","nullable":true,"type":[[["ArgumentCollectorResult"]]]}],"meta":{"line":348,"file":"context.js","path":"src/extensions"}},{"name":"commandPrefixChange","description":"Emitted whenever a guild's command prefix is changed","params":[{"name":"guild","description":"Guild that the prefix was changed in (null for global)","nullable":true,"type":[[["CommandoGuild"]]]},{"name":"prefix","description":"New command prefix (null for default)","nullable":true,"type":[[["string"]]]}],"meta":{"line":65,"file":"guild.js","path":"src/extensions"}},{"name":"commandStatusChange","description":"Emitted whenever a command is enabled/disabled in a guild","params":[{"name":"guild","description":"Guild that the command was enabled/disabled in (null for global)","nullable":true,"type":[[["CommandoGuild"]]]},{"name":"command","description":"Command that was enabled/disabled","type":[[["Command"]]]},{"name":"enabled","description":"Whether the command is enabled","type":[[["boolean"]]]}],"meta":{"line":93,"file":"guild.js","path":"src/extensions"}},{"name":"groupStatusChange","description":"Emitted whenever a command group is enabled/disabled in a guild","params":[{"name":"guild","description":"Guild that the group was enabled/disabled in (null for global)","nullable":true,"type":[[["CommandoGuild"]]]},{"name":"group","description":"Group that was enabled/disabled","type":[[["CommandGroup"]]]},{"name":"enabled","description":"Whether the group is enabled","type":[[["boolean"]]]}],"meta":{"line":136,"file":"guild.js","path":"src/extensions"}}],"meta":{"line":11,"file":"client.js","path":"src"}},{"name":"CommandDispatcher","description":"Handles parsing messages and running commands from them","construct":{"name":"CommandDispatcher","params":[{"name":"client","description":"Client the dispatcher is for","type":[[["CommandoClient"]]]},{"name":"registry","description":"Registry the dispatcher will use","type":[[["CommandoRegistry"]]]}]},"props":[{"name":"client","description":"Client this dispatcher handles messages for","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":12,"file":"dispatcher.js","path":"src"}},{"name":"registry","description":"Registry this dispatcher uses","type":[[["CommandoRegistry"]]],"meta":{"line":24,"file":"dispatcher.js","path":"src"}},{"name":"inhibitors","description":"Functions that can block commands from running","type":[[["Set","<"],["function","()>"]]],"meta":{"line":30,"file":"dispatcher.js","path":"src"}},{"name":"_commandPatterns","description":"Map object of {@link RegExp}s that match command messages, mapped by string prefix","access":"private","type":[[["Object"]]],"meta":{"line":37,"file":"dispatcher.js","path":"src"}},{"name":"_results","description":"Old command message results, mapped by original message ID","access":"private","type":[[["Map","<"],["string",", "],["CommandoMessage",">"]]],"meta":{"line":44,"file":"dispatcher.js","path":"src"}},{"name":"_awaiting","description":"Tuples in string form of user ID and channel ID that are currently awaiting messages from a user in a channel","access":"private","type":[[["Set","<"],["string",">"]]],"meta":{"line":51,"file":"dispatcher.js","path":"src"}}],"methods":[{"name":"addInhibitor","description":"Adds an inhibitor","examples":["client.dispatcher.addInhibitor(msg => {\n  if(blacklistedUsers.has(msg.author.id)) return 'blacklisted';\n});","client.dispatcher.addInhibitor(msg => {\n\tif(!coolUsers.has(msg.author.id)) return { reason: 'cool', response: msg.reply('You\\'re not cool enough!') };\n});"],"params":[{"name":"inhibitor","description":"The inhibitor function to add","type":[[["Inhibitor"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether the addition was successful"},"meta":{"line":83,"file":"dispatcher.js","path":"src"}},{"name":"removeInhibitor","description":"Removes an inhibitor","params":[{"name":"inhibitor","description":"The inhibitor function to remove","type":[[["Inhibitor"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether the removal was successful"},"meta":{"line":95,"file":"dispatcher.js","path":"src"}},{"name":"handleMessage","description":"Handle a new message or a message update","access":"private","params":[{"name":"message","description":"The message to handle","type":[[["Message"]]]},{"name":"oldMessage","description":"The old message before the update","optional":true,"type":[[["Message"]]]}],"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":107,"file":"dispatcher.js","path":"src"}},{"name":"shouldHandleMessage","description":"Check whether a message should be handled","access":"private","params":[{"name":"message","description":"The message to handle","type":[[["Message"]]]},{"name":"oldMessage","description":"The old message before the update","optional":true,"type":[[["Message"]]]}],"returns":[[["boolean"]]],"meta":{"line":174,"file":"dispatcher.js","path":"src"}},{"name":"inhibit","description":"Inhibits a command message","access":"private","params":[{"name":"cmdMsg","description":"Command message to inhibit","type":[[["CommandoMessage"]]]}],"async":true,"returns":{"types":[[["Inhibition"]]],"nullable":true},"meta":{"line":196,"file":"dispatcher.js","path":"src"}},{"name":"cacheCommandoMessage","description":"Caches a command message to be editable","access":"private","params":[{"name":"message","description":"Triggering message","type":[[["Message"]]]},{"name":"oldMessage","description":"Triggering message's old version","type":[[["Message"]]]},{"name":"cmdMsg","description":"Command message to cache","type":[[["CommandoMessage"]]]},{"name":"responses","description":"Responses to the message","type":[[["Message"]],[["Array","<"],["Message",">"]]]}],"meta":{"line":230,"file":"dispatcher.js","path":"src"}},{"name":"parseMessage","description":"Parses a message to find details about command usage in it","access":"private","params":[{"name":"message","description":"The message","type":[[["Message"]]]}],"returns":{"types":[[["CommandoMessage"]]],"nullable":true},"meta":{"line":249,"file":"dispatcher.js","path":"src"}},{"name":"matchDefault","description":"Matches a message against a guild command pattern","access":"private","params":[{"name":"message","description":"The message","type":[[["Message"]]]},{"name":"pattern","description":"The pattern to match against","type":[[["RegExp"]]]},{"name":"commandNameIndex","description":"The index of the command name in the pattern matches","default":1,"type":[[["number"]]]},{"name":"prefixless","description":"Whether the match is happening for a prefixless usage","default":false,"type":[[["boolean"]]]}],"returns":{"types":[[["CommandoMessage"]]],"nullable":true},"meta":{"line":277,"file":"dispatcher.js","path":"src"}},{"name":"buildCommandPattern","description":"Creates a regular expression to match the command prefix and name in a message","access":"private","params":[{"name":"prefix","description":"Prefix to build the pattern for","nullable":true,"type":[[["string"]]]}],"returns":[[["RegExp"]]],"meta":{"line":298,"file":"dispatcher.js","path":"src"}}],"meta":{"line":6,"file":"dispatcher.js","path":"src"}},{"name":"CommandoRegistry","description":"Handles registration and searching of commands and groups","construct":{"name":"CommandoRegistry","params":[{"name":"client","description":"Client to use","optional":true,"type":[[["CommandoClient"]]]}]},"props":[{"name":"client","description":"The client this registry is for","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":16,"file":"registry.js","path":"src"}},{"name":"commands","description":"Registered commands, mapped by their name","type":[[["discordCollection","<"],["string",", "],["Command",">"]]],"meta":{"line":32,"file":"registry.js","path":"src"}},{"name":"groups","description":"Registered command groups, mapped by their ID","type":[[["Collection","<"],["string",", "],["CommandGroup",">"]]],"meta":{"line":38,"file":"registry.js","path":"src"}},{"name":"types","description":"Registered argument types, mapped by their ID","type":[[["Collection","<"],["string",", "],["ArgumentType",">"]]],"meta":{"line":44,"file":"registry.js","path":"src"}},{"name":"commandsPath","description":"Fully resolved path to the bot's commands directory","nullable":true,"type":[[["string"]]],"meta":{"line":50,"file":"registry.js","path":"src"}},{"name":"services","description":"Holds all the registered services","type":[[["Map"]]],"meta":{"line":56,"file":"registry.js","path":"src"}},{"name":"unknownCommand","description":"Command to run when an unknown command is used","nullable":true,"type":[[["Command"]]],"meta":{"line":62,"file":"registry.js","path":"src"}}],"methods":[{"name":"_prepareCommandsForSlash","access":"private","returns":[[["Array","<"],["any",">"]]],"meta":{"line":69,"file":"registry.js","path":"src"}},{"name":"registerSlashInGuild","description":"Registers all slash commands in given guild. Use for development purposes.","params":[{"name":"guild","description":"The guild to register commands in","type":[[["GuildResolvable"]]]}],"async":true,"meta":{"line":93,"file":"registry.js","path":"src"}},{"name":"registerSlashGlobally","description":"Registers all slash commands globally","async":true,"meta":{"line":107,"file":"registry.js","path":"src"}},{"name":"registerGroup","description":"Registers a single group","see":["{@link CommandoRegistry#registerGroups}"],"params":[{"name":"group","description":"A CommandGroup instance, a constructor, or the group ID","type":[[["CommandGroup"]],[["function"]],[["Object"]],[["string"]]]},{"name":"name","description":"Name for the group (if the first argument is the group ID)","optional":true,"type":[[["string"]]]},{"name":"guarded","description":"Whether the group should be guarded (if the first argument is the group ID)","optional":true,"type":[[["boolean"]]]}],"returns":[[["CommandoRegistry"]]],"meta":{"line":124,"file":"registry.js","path":"src"}},{"name":"registerGroups","description":"Registers multiple groups","examples":["registry.registerGroups([\n\t['fun', 'Fun'],\n\t['mod', 'Moderation']\n]);","registry.registerGroups([\n\t{ id: 'fun', name: 'Fun' },\n\t{ id: 'mod', name: 'Moderation' }\n]);"],"params":[{"name":"groups","description":"An array of CommandGroup instances,\nconstructors, plain objects (with ID, name, and guarded properties),\nor arrays of {@link CommandoRegistry#registerGroup} parameters","type":[[["Array","<"],["CommandGroup",">"]],[["Array","<"],["function","()>"]],[["Array","<"],["Object",">"]],[["Array","<"],["Array","<"],["string",">>"]]]}],"returns":[[["CommandoRegistry"]]],"meta":{"line":169,"file":"registry.js","path":"src"}},{"name":"registerCommand","description":"Registers a single command","see":["{@link CommandoRegistry#registerCommands}"],"params":[{"name":"command","description":"Either a Command instance, or a constructor for one","type":[[["Command"]],[["function"]]]}],"returns":[[["CommandoRegistry"]]],"meta":{"line":184,"file":"registry.js","path":"src"}},{"name":"registerCommands","description":"Registers multiple commands","params":[{"name":"commands","description":"An array of Command instances or constructors","type":[[["Array","<"],["Command",">"]],[["Array","<"],["function","()>"]]]},{"name":"ignoreInvalid","description":"Whether to skip over invalid objects without throwing an error","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["CommandoRegistry"]]],"meta":{"line":232,"file":"registry.js","path":"src"}},{"name":"registerCommandsIn","description":"Registers all commands in a directory. The files must export a Command class constructor or instance.","examples":["const path = require('path');\nregistry.registerCommandsIn(path.join(__dirname, 'commands'));"],"params":[{"name":"options","description":"The path to the directory, or a require-all options object","type":[[["string"]],[["RequireAllOptions"]]]}],"returns":[[["CommandoRegistry"]]],"meta":{"line":254,"file":"registry.js","path":"src"}},{"name":"registerType","description":"Registers a single argument type","see":["{@link CommandoRegistry#registerTypes}"],"params":[{"name":"type","description":"Either an ArgumentType instance, or a constructor for one","type":[[["ArgumentType"]],[["function"]]]}],"returns":[[["CommandoRegistry"]]],"meta":{"line":276,"file":"registry.js","path":"src"}},{"name":"registerTypes","description":"Registers multiple argument types","params":[{"name":"types","description":"An array of ArgumentType instances or constructors","type":[[["Array","<"],["ArgumentType",">"]],[["Array","<"],["function","()>"]]]},{"name":"ignoreInvalid","description":"Whether to skip over invalid objects without throwing an error","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":[[["CommandoRegistry"]]],"meta":{"line":308,"file":"registry.js","path":"src"}},{"name":"registerTypesIn","description":"Registers all argument types in a directory. The files must export an ArgumentType class constructor or instance.","params":[{"name":"options","description":"The path to the directory, or a require-all options object","type":[[["string"]],[["RequireAllOptions"]]]}],"returns":[[["CommandoRegistry"]]],"meta":{"line":327,"file":"registry.js","path":"src"}},{"name":"registerDefaults","description":"Registers the default argument types, groups, and commands. This is equivalent to:\n```js\nregistry.registerDefaultTypes()\n\t.registerDefaultGroups()\n\t.registerDefaultCommands();\n```","returns":[[["CommandoRegistry"]]],"meta":{"line":343,"file":"registry.js","path":"src"}},{"name":"registerDefaultGroups","description":"Registers the default groups (\"util\" and \"commands\")","returns":[[["CommandoRegistry"]]],"meta":{"line":354,"file":"registry.js","path":"src"}},{"name":"registerDefaultCommands","description":"Registers the default commands to the registry","params":[{"name":"commands","description":"Object specifying which commands to register","optional":true,"type":[[["Object"]]]},{"name":"commands.help","description":"Whether to register the built-in help command\n(requires \"util\" group and \"string\" type)","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"commands.prefix","description":"Whether to register the built-in prefix command\n(requires \"util\" group and \"string\" type)","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"commands.eval","description":"Whether to register the built-in eval command\n(requires \"util\" group and \"string\" type)","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"commands.ping","description":"Whether to register the built-in ping command (requires \"util\" group)","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"commands.unknownCommand","description":"Whether to register the built-in unknown command\n(requires \"util\" group)","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"commands.commandState","description":"Whether to register the built-in command state commands\n(enable, disable, load, unload, reload, list groups - requires \"commands\" group, \"command\" type, and \"group\" type)","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["CommandoRegistry"]]],"meta":{"line":377,"file":"registry.js","path":"src"}},{"name":"registerDefaultTypes","description":"Registers the default argument types to the registry","params":[{"name":"types","description":"Object specifying which types to register","optional":true,"type":[[["Object"]]]},{"name":"types.string","description":"Whether to register the built-in string type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.integer","description":"Whether to register the built-in integer type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.float","description":"Whether to register the built-in float type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.boolean","description":"Whether to register the built-in boolean type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.user","description":"Whether to register the built-in user type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.member","description":"Whether to register the built-in member type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.role","description":"Whether to register the built-in role type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.channel","description":"Whether to register the built-in channel type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.textChannel","description":"Whether to register the built-in text-channel type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.voiceChannel","description":"Whether to register the built-in voice-channel type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.categoryChannel","description":"Whether to register the built-in category-channel type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.message","description":"Whether to register the built-in message type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.customEmoji","description":"Whether to register the built-in custom-emoji type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.command","description":"Whether to register the built-in command type","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"types.group","description":"Whether to register the built-in group type","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":[[["CommandoRegistry"]]],"meta":{"line":420,"file":"registry.js","path":"src"}},{"name":"reregisterCommand","description":"Reregisters a command (does not support changing name, group, or memberName)","params":[{"name":"command","description":"New command","type":[[["Command"]],[["function"]]]},{"name":"oldCommand","description":"Old command","type":[[["Command"]]]}],"meta":{"line":450,"file":"registry.js","path":"src"}},{"name":"unregisterCommand","description":"Unregisters a command","params":[{"name":"command","description":"Command to unregister","type":[[["Command"]]]}],"meta":{"line":483,"file":"registry.js","path":"src"}},{"name":"findGroups","description":"Finds all groups that match the search string","params":[{"name":"searchString","description":"The string to search for","optional":true,"default":null,"type":[[["string"]]]},{"name":"exact","description":"Whether the search should be exact","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":{"types":[[["Array","<"],["CommandGroup",">"]]],"description":"All groups that are found"},"meta":{"line":503,"file":"registry.js","path":"src"}},{"name":"resolveGroup","description":"Resolves a CommandGroupResolvable to a CommandGroup object","params":[{"name":"group","description":"The group to resolve","type":[[["CommandGroupResolvable"]]]}],"returns":{"types":[[["CommandGroup"]]],"description":"The resolved CommandGroup"},"meta":{"line":532,"file":"registry.js","path":"src"}},{"name":"findCommands","description":"Finds all commands that match the search string","params":[{"name":"searchString","description":"The string to search for","optional":true,"default":null,"type":[[["string"]]]},{"name":"exact","description":"Whether the search should be exact","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"message","description":"The message to check usability against","optional":true,"default":null,"type":[[["Message"]]]}],"returns":{"types":[[["Array","<"],["Command",">"]]],"description":"All commands that are found"},"meta":{"line":548,"file":"registry.js","path":"src"}},{"name":"resolveCommand","description":"Resolves a CommandResolvable to a Command object","params":[{"name":"command","description":"The command to resolve","type":[[["CommandResolvable"]]]}],"returns":{"types":[[["Command"]]],"description":"The resolved Command"},"meta":{"line":593,"file":"registry.js","path":"src"}},{"name":"resolveCommandPath","description":"Resolves a command file path from a command's group ID and memberName","params":[{"name":"group","description":"ID of the command's group","type":[[["string"]]]},{"name":"memberName","description":"Member name of the command","type":[[["string"]]]}],"returns":{"types":[[["string"]]],"description":"Fully-resolved path to the corresponding command file"},"meta":{"line":609,"file":"registry.js","path":"src"}},{"name":"registerService","description":"Loads and registers a service","params":[{"name":"service","description":"The service to register and load","type":[[["Service"]]]}],"returns":[[["CommandoRegistry"]]],"meta":{"line":618,"file":"registry.js","path":"src"}},{"name":"registerServiceFrom","description":"Loads and registers a service from path","params":[{"name":"service","description":"path to load the service from","type":[[["string"]]]}],"returns":[[["CommandoRegistry"]]],"meta":{"line":637,"file":"registry.js","path":"src"}},{"name":"registerServicesIn","description":"Loads all services in given directory (2 levels, services should be grouped in folders)","params":[{"name":"dir","description":"Directory to load services from","type":[[["string"]]]}],"returns":[[["CommandoRegistry"]]],"meta":{"line":651,"file":"registry.js","path":"src"}},{"name":"unregisterService","description":"Unloads and unregisters service","params":[{"name":"service","description":"Unloads and unregisters a service","type":[[["Service"]]]}],"returns":[[["CommandoRegistry"]]],"meta":{"line":683,"file":"registry.js","path":"src"}},{"name":"reregisterService","description":"Unloads old and loads and registers new service.","params":[{"name":"service","description":"New service to load","type":[[["Service"]]]},{"name":"current","description":"Current service to unload","type":[[["Service"]]]}],"returns":[[["CommandoRegistry"]]],"meta":{"line":696,"file":"registry.js","path":"src"}}],"meta":{"line":13,"file":"registry.js","path":"src"}},{"name":"Service","description":"Handles a single service","construct":{"name":"Service","description":"Creates new service","params":[{"name":"client","description":"The commando client","type":[[["CommandoClient"]]]}]},"props":[{"name":"intervals","description":"Active intervals","type":[[["Array","<"],["NodeJSTimeout",">"]]],"meta":{"line":14,"file":"service.js","path":"src"}},{"name":"realClient","description":"Real, unproxied client","type":[[["CommandoClient"]]],"meta":{"line":19,"file":"service.js","path":"src"}},{"name":"handlers","description":"Applied handlers","type":[[["Map","<"],["string",", "],["function","()>"]]],"meta":{"line":24,"file":"service.js","path":"src"}},{"name":"client","description":"The client to register handlers on. Proxied","type":[[["CommandoClient"]]],"meta":{"line":41,"file":"service.js","path":"src"}}],"methods":[{"name":"setInterval","description":"Creates an interval using `setInterval`, removed when reloaded","params":[{"name":"handler","description":"The callback handler to pass to setInterval","type":[[["function"]]]},{"name":"length","description":"Number of miliseconds to wait between each call","type":[[["number"]]]}],"returns":[[["Array","<"],["NodeJSTimeout",">"]]],"meta":{"line":50,"file":"service.js","path":"src"}},{"name":"unload","description":"Unloads the service","returns":[[["void"]]],"meta":{"line":60,"file":"service.js","path":"src"}},{"name":"load","description":"Loads the service","abstract":true,"returns":[[["void"]]],"meta":{"line":73,"file":"service.js","path":"src"}},{"name":"appendHandlers","description":"Appends handlers to the real client","access":"private","returns":[[["void"]]],"meta":{"line":82,"file":"service.js","path":"src"}},{"name":"reload","description":"Reloads the service","returns":[[["void"]]],"meta":{"line":92,"file":"service.js","path":"src"}}],"meta":{"line":4,"file":"service.js","path":"src"}},{"name":"Argument","description":"A fancy argument","construct":{"name":"Argument","params":[{"name":"client","description":"Client the argument is for","type":[[["CommandoClient"]]]},{"name":"info","description":"Information for the command argument","type":[[["ArgumentInfo"]]]}]},"props":[{"name":"client","description":"The command client","type":[[["CommandoClient"]]],"meta":{"line":47,"file":"argument.js","path":"src/commands"}},{"name":"key","description":"Key for the argument","type":[[["string"]]],"meta":{"line":53,"file":"argument.js","path":"src/commands"}},{"name":"label","description":"Label for the argument","type":[[["string"]]],"meta":{"line":59,"file":"argument.js","path":"src/commands"}},{"name":"prompt","description":"Question prompt for the argument","type":[[["string"]]],"meta":{"line":65,"file":"argument.js","path":"src/commands"}},{"name":"error","description":"Error message for when a value is invalid","nullable":true,"type":[[["string"]]],"meta":{"line":71,"file":"argument.js","path":"src/commands"}},{"name":"type","description":"Type of the argument","nullable":true,"type":[[["ArgumentType"]]],"meta":{"line":77,"file":"argument.js","path":"src/commands"}},{"name":"max","description":"If type is `integer` or `float`, this is the maximum value of the number.\nIf type is `string`, this is the maximum length of the string.","nullable":true,"type":[[["number"]]],"meta":{"line":84,"file":"argument.js","path":"src/commands"}},{"name":"min","description":"If type is `integer` or `float`, this is the minimum value of the number.\nIf type is `string`, this is the minimum length of the string.","nullable":true,"type":[[["number"]]],"meta":{"line":91,"file":"argument.js","path":"src/commands"}},{"name":"default","description":"The default value for the argument","nullable":true,"type":[[["ArgumentDefault"]]],"meta":{"line":97,"file":"argument.js","path":"src/commands"}},{"name":"oneOf","description":"Values the user can choose from\nIf type is `string`, this will be case-insensitive\nIf type is `channel`, `member`, `role`, or `user`, this will be the IDs.","nullable":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":105,"file":"argument.js","path":"src/commands"}},{"name":"infinite","description":"Whether the argument accepts an infinite number of values","type":[[["boolean"]]],"meta":{"line":111,"file":"argument.js","path":"src/commands"}},{"name":"validator","description":"Validator function for validating a value for the argument","see":["{@link ArgumentType#validate}"],"nullable":true,"type":[[["function"]]],"meta":{"line":118,"file":"argument.js","path":"src/commands"}},{"name":"parser","description":"Parser function for parsing a value for the argument","see":["{@link ArgumentType#parse}"],"nullable":true,"type":[[["function"]]],"meta":{"line":125,"file":"argument.js","path":"src/commands"}},{"name":"emptyChecker","description":"Function to check whether a raw value is considered empty","see":["{@link ArgumentType#isEmpty}"],"nullable":true,"type":[[["function"]]],"meta":{"line":132,"file":"argument.js","path":"src/commands"}},{"name":"autocomplete","description":"Function to autocomplete users input","see":["{@link ArgumentType#autocomplete}"],"nullable":true,"type":[[["function"]]],"meta":{"line":139,"file":"argument.js","path":"src/commands"}},{"name":"wait","description":"How long to wait for input (in seconds)","type":[[["number"]]],"meta":{"line":145,"file":"argument.js","path":"src/commands"}}],"methods":[{"name":"promptArgument","description":"Blocks command use and prompts the user and obtains the value for the argument","params":[{"name":"msg","description":"Message that triggered the command","type":[[["CommandoMessage"]]]},{"name":"val","description":"Pre-provided value for the argument","optional":true,"type":[[["string"]]]},{"name":"promptLimit","description":"Maximum number of times to prompt for the argument","optional":true,"default":"Infinity","type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["ArgumentResult",">"]]],"meta":{"line":168,"file":"argument.js","path":"src/commands"}},{"name":"obtain","description":"Prompts the user and obtains the value for the argument","params":[{"name":"msg","description":"Message that triggered the command","type":[[["CommandoMessage"]]]},{"name":"val","description":"Pre-provided value for the argument","optional":true,"type":[[["string"]]]},{"name":"promptLimit","description":"Maximum number of times to prompt for the argument","optional":true,"default":"Infinity","type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["ArgumentResult",">"]]],"meta":{"line":183,"file":"argument.js","path":"src/commands"}},{"name":"obtainInfinite","description":"Prompts the user and obtains multiple values for the argument","access":"private","params":[{"name":"msg","description":"Message that triggered the command","type":[[["CommandoMessage"]]]},{"name":"vals","description":"Pre-provided values for the argument","optional":true,"type":[[["Array","<"],["string",">"]]]},{"name":"promptLimit","description":"Maximum number of times to prompt for the argument","optional":true,"default":"Infinity","type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["ArgumentResult",">"]]],"meta":{"line":278,"file":"argument.js","path":"src/commands"}},{"name":"validate","description":"Checks if a value is valid for the argument","params":[{"name":"val","description":"Value to check","type":[[["string"]]]},{"name":"msg","description":"Message that triggered the command","type":[[["CommandoMessage"]]]},{"name":"vmsg","description":"Message of the response, may be missing","nullable":true,"type":[[["CommandoMessage"]]]}],"returns":[[["boolean"]],[["string"]],[["Promise","<("],["boolean","|"],["string",")>"]]],"meta":{"line":392,"file":"argument.js","path":"src/commands"}},{"name":"parse","description":"Parses a value string into a proper value for the argument","params":[{"name":"val","description":"Value to parse","type":[[["string"]]]},{"name":"msg","description":"Message that triggered the command","type":[[["CommandoMessage"]]]},{"name":"vmsg","description":"Message of the response, may be missing","nullable":true,"type":[[["CommandoMessage"]]]}],"returns":[["*"],[["Promise","<"],["*",">"]]],"meta":{"line":406,"file":"argument.js","path":"src/commands"}},{"name":"isEmpty","description":"Checks whether a value for the argument is considered to be empty","params":[{"name":"val","description":"Value to check for emptiness","type":[[["string"]]]},{"name":"msg","description":"Message that triggered the command","type":[[["CommandoMessage"]]]},{"name":"vmsg","description":"Message of the response, may be missing","nullable":true,"type":[[["CommandoMessage"]]]}],"returns":[[["boolean"]]],"meta":{"line":418,"file":"argument.js","path":"src/commands"}},{"name":"validateInfo","description":"Validates the constructor parameters","scope":"static","access":"private","params":[{"name":"client","description":"Client to validate","type":[[["CommandoClient"]]]},{"name":"info","description":"Info to validate","type":[[["ArgumentInfo"]]]}],"meta":{"line":431,"file":"argument.js","path":"src/commands"}},{"name":"determineType","description":"Gets the argument type to use from an ID","scope":"static","access":"private","params":[{"name":"client","description":"Client to use the registry of","type":[[["CommandoClient"]]]},{"name":"id","description":"ID of the type to use","type":[[["string"]]]}],"returns":{"types":[[["ArgumentType"]]],"nullable":true},"meta":{"line":466,"file":"argument.js","path":"src/commands"}}],"meta":{"line":6,"file":"argument.js","path":"src/commands"}},{"name":"Command","description":"A command that can be run in a client","construct":{"name":"Command","params":[{"name":"client","description":"The client the command is for","type":[[["CommandoClient"]]]},{"name":"info","description":"The command information","type":[[["CommandInfo"]]]}]},"props":[{"name":"client","description":"Client that this command is for","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":67,"file":"base.js","path":"src/commands"}},{"name":"name","description":"Name of this command","type":[[["string"]]],"meta":{"line":79,"file":"base.js","path":"src/commands"}},{"name":"aliases","description":"Aliases for this command","type":[[["Array","<"],["string",">"]]],"meta":{"line":85,"file":"base.js","path":"src/commands"}},{"name":"groupID","description":"ID of the group the command belongs to","type":[[["string"]]],"meta":{"line":97,"file":"base.js","path":"src/commands"}},{"name":"group","description":"The group the command belongs to, assigned upon registration","nullable":true,"type":[[["CommandGroup"]]],"meta":{"line":103,"file":"base.js","path":"src/commands"}},{"name":"memberName","description":"Name of the command within the group","type":[[["string"]]],"meta":{"line":109,"file":"base.js","path":"src/commands"}},{"name":"description","description":"Short description of the command","type":[[["string"]]],"meta":{"line":115,"file":"base.js","path":"src/commands"}},{"name":"command","description":"Whether the command is also a discord command. True for slash command.","type":[[["boolean"]],[["slash","\""]],[["message","\""]],[["user","\""]]],"meta":{"line":121,"file":"base.js","path":"src/commands"}},{"name":"commandOnly","description":"Whether the command is only a discord command (cannot be triggered by normal message, except with patterns)","type":[[["boolean"]]],"meta":{"line":126,"file":"base.js","path":"src/commands"}},{"name":"format","description":"Usage format string of the command","type":[[["string"]]],"meta":{"line":132,"file":"base.js","path":"src/commands"}},{"name":"details","description":"Long description of the command","nullable":true,"type":[[["string"]]],"meta":{"line":138,"file":"base.js","path":"src/commands"}},{"name":"examples","description":"Example usage strings","nullable":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":144,"file":"base.js","path":"src/commands"}},{"name":"examplesName","description":"Examples name in help","nullable":true,"type":[[["string"]]],"meta":{"line":150,"file":"base.js","path":"src/commands"}},{"name":"guildOnly","description":"Whether the command can only be run in a guild channel","type":[[["boolean"]]],"meta":{"line":156,"file":"base.js","path":"src/commands"}},{"name":"ownerOnly","description":"Whether the command can only be used by an owner","type":[[["boolean"]]],"meta":{"line":162,"file":"base.js","path":"src/commands"}},{"name":"clientPermissions","description":"Permissions required by the client to use the command.","nullable":true,"type":[[["Array","<"],["PermissionResolvable",">"]]],"meta":{"line":168,"file":"base.js","path":"src/commands"}},{"name":"userPermissions","description":"Permissions required by the user to use the command.","nullable":true,"type":[[["Array","<"],["PermissionResolvable",">"]]],"meta":{"line":174,"file":"base.js","path":"src/commands"}},{"name":"nsfw","description":"Whether the command can only be used in NSFW channels","type":[[["boolean"]]],"meta":{"line":180,"file":"base.js","path":"src/commands"}},{"name":"defaultHandling","description":"Whether the default command handling is enabled for the command","type":[[["boolean"]]],"meta":{"line":186,"file":"base.js","path":"src/commands"}},{"name":"throttling","description":"Options for throttling command usages","nullable":true,"type":[[["ThrottlingOptions"]]],"meta":{"line":192,"file":"base.js","path":"src/commands"}},{"name":"argsCollector","description":"The argument collector for the command","nullable":true,"type":[[["ArgumentCollector"]]],"meta":{"line":198,"file":"base.js","path":"src/commands"}},{"name":"argsType","description":"How the arguments are split when passed to the command's run method","type":[[["string"]]],"meta":{"line":213,"file":"base.js","path":"src/commands"}},{"name":"argsCount","description":"Maximum number of arguments that will be split","type":[[["number"]]],"meta":{"line":219,"file":"base.js","path":"src/commands"}},{"name":"argsSingleQuotes","description":"Whether single quotes are allowed to encapsulate an argument","type":[[["boolean"]]],"meta":{"line":225,"file":"base.js","path":"src/commands"}},{"name":"patterns","description":"Regular expression triggers","type":[[["Array","<"],["RegExp",">"]]],"meta":{"line":231,"file":"base.js","path":"src/commands"}},{"name":"guarded","description":"Whether the command is protected from being disabled","type":[[["boolean"]]],"meta":{"line":237,"file":"base.js","path":"src/commands"}},{"name":"hidden","description":"Whether the command should be hidden from the help command","type":[[["boolean"]]],"meta":{"line":243,"file":"base.js","path":"src/commands"}},{"name":"unknown","description":"Whether the command will be run when an unknown command is used","type":[[["boolean"]]],"meta":{"line":249,"file":"base.js","path":"src/commands"}},{"name":"_globalEnabled","description":"Whether the command is enabled globally","access":"private","type":[[["boolean"]]],"meta":{"line":256,"file":"base.js","path":"src/commands"}},{"name":"_throttles","description":"Current throttle objects for the command, mapped by user ID","access":"private","type":[[["Map","<"],["string",", "],["Object",">"]]],"meta":{"line":263,"file":"base.js","path":"src/commands"}}],"methods":[{"name":"hasPermission","description":"Checks whether the user has permission to use the command","params":[{"name":"message","description":"The triggering command message","type":[[["CommandoMessage"]]]},{"name":"ownerOverride","description":"Whether the bot owner(s) will always have permission","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["boolean"]],[["string"]]],"description":"Whether the user has permission, or an error message to respond with if they don't"},"meta":{"line":272,"file":"base.js","path":"src/commands"}},{"name":"run","description":"Runs the command","abstract":true,"params":[{"name":"message","description":"The message the command is being run for","type":[[["Context"]]]},{"name":"args","description":"The arguments for the command, or the matches from a pattern.\nIf args is specified on the command, thise will be the argument values object. If argsType is single, then only\none string will be passed. If multiple, an array of strings will be passed. When fromPattern is true, this is the\nmatches array from the pattern match\n(see [RegExp#exec](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec)).","type":[[["Object"]],[["string"]],[["Array","<"],["string",">"]]]},{"name":"fromPattern","description":"Whether or not the command is being run from a pattern match","type":[[["boolean"]]]},{"name":"result","description":"Result from obtaining the arguments from the collector (if applicable)","nullable":true,"type":[[["ArgumentCollectorResult"]]]}],"async":true,"returns":[[["Promise","<(?"],["Message","|?"],["Array","<"],["Message",">)>"]]],"meta":{"line":309,"file":"base.js","path":"src/commands"}},{"name":"onBlock","description":"Called when the command is prevented from running","params":[{"name":"message","description":"Command message that the command is running from","type":[[["CommandMessage"]]]},{"name":"reason","description":"Reason that the command was blocked\n(built-in reasons are `guildOnly`, `nsfw`, `permission`, `throttling`, and `clientPermissions`)","type":[[["string"]]]},{"name":"data","description":"Additional data associated with the block. Built-in reason data properties:\n- guildOnly: none\n- nsfw: none\n- permission: `response` ({@link string}) to send\n- throttling: `throttle` ({@link Object}), `remaining` ({@link number}) time in seconds\n- clientPermissions: `missing` ({@link Array}<{@link string}>) permission names","optional":true,"type":[[["Object"]]]}],"returns":[[["Promise","<(?"],["Message","|?"],["Array","<"],["Message",">)>"]]],"meta":{"line":326,"file":"base.js","path":"src/commands"}},{"name":"onError","description":"Called when the command produces an error while running","params":[{"name":"err","description":"Error that was thrown","type":[[["Error"]]]},{"name":"message","description":"Command message that the command is running from (see {@link Command#run})","type":[[["CommandMessage"]]]},{"name":"args","description":"Arguments for the command (see {@link Command#run})","type":[[["Object"]],[["string"]],[["Array","<"],["string",">"]]]},{"name":"fromPattern","description":"Whether the args are pattern matches (see {@link Command#run})","type":[[["boolean"]]]},{"name":"result","description":"Result from obtaining the arguments from the collector\n(if applicable - see {@link Command#run})","nullable":true,"type":[[["ArgumentCollectorResult"]]]}],"returns":[[["Promise","<(?"],["Message","|?"],["Array","<"],["Message",">)>"]]],"meta":{"line":367,"file":"base.js","path":"src/commands"}},{"name":"throttle","description":"Creates/obtains the throttle object for a user, if necessary (owners are excluded)","access":"private","params":[{"name":"userID","description":"ID of the user to throttle for","type":[[["string"]]]}],"returns":{"types":[[["ThrottleResult"]]],"nullable":true},"meta":{"line":397,"file":"base.js","path":"src/commands"}},{"name":"setEnabledIn","description":"Enables or disables the command in a guild","params":[{"name":"guild","description":"Guild to enable/disable the command in","nullable":true,"type":[[["GuildResolvable"]]]},{"name":"enabled","description":"Whether the command should be enabled or disabled","type":[[["boolean"]]]}],"meta":{"line":420,"file":"base.js","path":"src/commands"}},{"name":"isEnabledIn","description":"Checks if the command is enabled in a guild","params":[{"name":"guild","description":"Guild to check in","nullable":true,"type":[[["GuildResolvable"]]]},{"name":"bypassGroup","description":"Whether to bypass checking the group's status","optional":true,"type":[[["boolean"]]]}],"returns":[[["boolean"]]],"meta":{"line":439,"file":"base.js","path":"src/commands"}},{"name":"isUsable","description":"Checks if the command is usable for a message","params":[{"name":"message","description":"The message","default":null,"nullable":true,"type":[[["Message"]]]}],"returns":[[["boolean"]]],"meta":{"line":451,"file":"base.js","path":"src/commands"}},{"name":"usage","description":"Creates a usage string for the command","params":[{"name":"argString","description":"A string of arguments for the command","optional":true,"type":[[["string"]]]},{"name":"prefix","description":"Prefix to use for the prefixed command format","optional":true,"default":"this.client.commandPrefix","type":[[["string"]]]},{"name":"user","description":"User to use for the mention command format","optional":true,"default":"this.client.user","type":[[["User"]]]}],"returns":[[["string"]]],"meta":{"line":465,"file":"base.js","path":"src/commands"}},{"name":"reload","description":"Reloads the command","meta":{"line":472,"file":"base.js","path":"src/commands"}},{"name":"unload","description":"Unloads the command","meta":{"line":498,"file":"base.js","path":"src/commands"}},{"name":"usage","description":"Creates a usage string for a command","scope":"static","params":[{"name":"command","description":"A command + arg string","type":[[["string"]]]},{"name":"prefix","description":"Prefix to use for the prefixed command format","optional":true,"default":null,"type":[[["string"]]]},{"name":"user","description":"User to use for the mention command format","optional":true,"default":null,"type":[[["User"]]]}],"returns":[[["string"]]],"meta":{"line":512,"file":"base.js","path":"src/commands"}},{"name":"validateInfo","description":"Validates the constructor parameters","scope":"static","access":"private","params":[{"name":"client","description":"Client to validate","type":[[["CommandoClient"]]]},{"name":"info","description":"Info to validate","type":[[["CommandInfo"]]]}],"meta":{"line":535,"file":"base.js","path":"src/commands"}}],"meta":{"line":8,"file":"base.js","path":"src/commands"}},{"name":"ArgumentCollector","description":"Obtains, validates, and prompts for argument values","construct":{"name":"ArgumentCollector","params":[{"name":"client","description":"Client the collector will use","type":[[["CommandoClient"]]]},{"name":"args","description":"Arguments for the collector","type":[[["Array","<"],["ArgumentInfo",">"]]]},{"name":"promptLimit","description":"Maximum number of times to prompt for a single argument","optional":true,"default":"Infinity","type":[[["number"]]]}]},"props":[{"name":"client","description":"Client this collector is for","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":15,"file":"collector.js","path":"src/commands"}},{"name":"args","description":"Arguments the collector handles","type":[[["Array","<"],["Argument",">"]]],"meta":{"line":27,"file":"collector.js","path":"src/commands"}},{"name":"promptLimit","description":"Maximum number of times to prompt for a single argument","type":[[["number"]]],"meta":{"line":43,"file":"collector.js","path":"src/commands"}}],"methods":[{"name":"obtain","description":"Obtains values for the arguments, prompting if necessary.","params":[{"name":"msg","description":"Message that the collector is being triggered by","type":[[["CommandoMessage"]]]},{"name":"provided","description":"Values that are already available","optional":true,"default":"[]","type":[[["Array","<"],["*",">"]]]},{"name":"promptLimit","description":"Maximum number of times to prompt for a single argument","optional":true,"default":"this.promptLimit","type":[[["number"]]]}],"async":true,"returns":[[["Promise","<"],["ArgumentCollectorResult",">"]]],"meta":{"line":65,"file":"collector.js","path":"src/commands"}}],"meta":{"line":4,"file":"collector.js","path":"src/commands"}},{"name":"CommandGroup","description":"A group for commands. Whodathunkit?","construct":{"name":"CommandGroup","params":[{"name":"client","description":"The client the group is for","type":[[["CommandoClient"]]]},{"name":"id","description":"The ID for the group","type":[[["string"]]]},{"name":"name","description":"The name of the group","optional":true,"default":"id","type":[[["string"]]]},{"name":"guarded","description":"Whether the group should be protected from disabling","optional":true,"default":false,"type":[[["boolean"]]]}]},"props":[{"name":"client","description":"Client that this group is for","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":17,"file":"group.js","path":"src/commands"}},{"name":"id","description":"ID of this group","type":[[["string"]]],"meta":{"line":29,"file":"group.js","path":"src/commands"}},{"name":"name","description":"Name of this group","type":[[["string"]]],"meta":{"line":35,"file":"group.js","path":"src/commands"}},{"name":"commands","description":"The commands in this group (added upon their registration)","type":[[["Collection","<"],["string",", "],["Command",">"]]],"meta":{"line":41,"file":"group.js","path":"src/commands"}},{"name":"guarded","description":"Whether or not this group is protected from being disabled","type":[[["boolean"]]],"meta":{"line":47,"file":"group.js","path":"src/commands"}}],"methods":[{"name":"setEnabledIn","description":"Enables or disables the group in a guild","params":[{"name":"guild","description":"Guild to enable/disable the group in","nullable":true,"type":[[["GuildResolvable"]]]},{"name":"enabled","description":"Whether the group should be enabled or disabled","type":[[["boolean"]]]}],"meta":{"line":57,"file":"group.js","path":"src/commands"}},{"name":"isEnabledIn","description":"Checks if the group is enabled in a guild","params":[{"name":"guild","description":"Guild to check in","nullable":true,"type":[[["GuildResolvable"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether or not the group is enabled"},"meta":{"line":75,"file":"group.js","path":"src/commands"}},{"name":"reload","description":"Reloads all of the group's commands","meta":{"line":85,"file":"group.js","path":"src/commands"}}],"meta":{"line":5,"file":"group.js","path":"src/commands"}},{"name":"CommandFormatError","description":"Has a descriptive message for a command not having proper format","extends":[[["FriendlyError"]]],"construct":{"name":"CommandFormatError","params":[{"name":"msg","description":"The command message the error is for","type":[[["CommandoMessage"]]]}]},"meta":{"line":7,"file":"command-format.js","path":"src/errors"}},{"name":"FriendlyError","description":"Has a message that can be considered user-friendly","extends":[[["Error"]]],"construct":{"name":"FriendlyError","params":[{"name":"message","description":"The error message","type":[[["string"]]]}]},"meta":{"line":5,"file":"friendly.js","path":"src/errors"}},{"name":"Context","description":"An extension of the base Discord.js Message class to add command-related functionality.","construct":{"name":"Context","description":"Creates new context","params":[{"name":"message","description":"-","type":[[["Message"]],[["Interaction"]]]}]},"props":[{"name":"message","description":"The message of this context","type":[[["Message"]]],"meta":{"line":25,"file":"context.js","path":"src/extensions"}},{"name":"alias","description":"Alias which invoked the command","nullable":true,"type":[[["string"]]],"meta":{"line":37,"file":"context.js","path":"src/extensions"}},{"name":"targetUser","description":"Target user of the context menu.","nullable":true,"type":[[["User"]]],"meta":{"line":47,"file":"context.js","path":"src/extensions"}},{"name":"targetMember","description":"Target member of the context menu.","nullable":true,"type":[[["GuildMember"]]],"meta":{"line":52,"file":"context.js","path":"src/extensions"}},{"name":"targetMessage","description":"Target message id of the context menu.","type":[[["APIMessage"]],[["Message","<"],["boolean",">"]]],"meta":{"line":58,"file":"context.js","path":"src/extensions"}},{"name":"isCommand","description":"Whether the message contains a command (even an unknown one)","type":[[["boolean"]]],"meta":{"line":66,"file":"context.js","path":"src/extensions"}},{"name":"command","description":"Command that the message triggers, if any","nullable":true,"type":[[["Command"]]],"meta":{"line":72,"file":"context.js","path":"src/extensions"}},{"name":"argString","description":"Argument string for the command","nullable":true,"type":[[["string"]]],"meta":{"line":78,"file":"context.js","path":"src/extensions"}},{"name":"patternMatches","description":"Pattern matches (if from a pattern trigger)","nullable":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":84,"file":"context.js","path":"src/extensions"}},{"name":"responses","description":"Response messages sent, mapped by channel ID (set by the dispatcher after running the command)","nullable":true,"type":[[["Object"]]],"meta":{"line":90,"file":"context.js","path":"src/extensions"}},{"name":"responsePositions","description":"Index of the current response that will be edited, mapped by channel ID","nullable":true,"type":[[["Object"]]],"meta":{"line":96,"file":"context.js","path":"src/extensions"}},{"name":"content","description":"Contains the text of the message","type":[[["string"]]],"meta":{"line":105,"file":"context.js","path":"src/extensions"}}],"methods":[{"name":"initCommand","description":"Initialises the message for a command","access":"private","params":[{"name":"command","description":"Command the message triggers","optional":true,"type":[[["Command"]]]},{"name":"argString","description":"Argument string for the command","optional":true,"type":[[["string"]]]},{"name":"patternMatches","description":"Command pattern matches (if from a pattern trigger)","optional":true,"nullable":true,"type":[[["Array","<"],["string",">"]]]},{"name":"alias","description":"alias used for command","default":null,"nullable":true,"type":[[["string"]]]}],"returns":{"types":[[["Message"]]],"description":"This message"},"meta":{"line":149,"file":"context.js","path":"src/extensions"}},{"name":"usage","description":"Creates a usage string for the message's command","params":[{"name":"argString","description":"A string of arguments for the command","optional":true,"type":[[["string"]]]},{"name":"prefix","description":"Prefix to use for the\nprefixed command format","optional":true,"default":"this.guild.commandPrefix || this.client.commandPrefix","type":[[["string"]]]},{"name":"user","description":"User to use for the mention command format","optional":true,"default":"this.client.user","type":[[["User"]]]}],"returns":[[["string"]]],"meta":{"line":166,"file":"context.js","path":"src/extensions"}},{"name":"anyUsage","description":"Creates a usage string for any command","params":[{"name":"command","description":"A command + arg string","optional":true,"type":[[["string"]]]},{"name":"prefix","description":"Prefix to use for the\nprefixed command format","optional":true,"default":"this.guild.commandPrefix || this.client.commandPrefix","type":[[["string"]]]},{"name":"user","description":"User to use for the mention command format","optional":true,"default":"this.client.user","type":[[["User"]]]}],"returns":[[["string"]]],"meta":{"line":182,"file":"context.js","path":"src/extensions"}},{"name":"parseArgs","description":"Parses the argString into usable arguments, based on the argsType and argsCount of the command","see":["{@link Command#run}"],"returns":[[["string"]],[["Array","<"],["string",">"]]],"meta":{"line":195,"file":"context.js","path":"src/extensions"}},{"name":"run","description":"Runs the command","async":true,"returns":[[["Promise","<(?"],["Message","|?"],["Array","<"],["Message",">)>"]]],"meta":{"line":212,"file":"context.js","path":"src/extensions"}},{"name":"respond","description":"Responds to the command message","access":"private","params":[{"name":"options","description":"Options for the response","optional":true,"type":[[["Object"]]]}],"returns":[[["Message"]],[["Array","<"],["Message",">"]]],"meta":{"line":376,"file":"context.js","path":"src/extensions"}},{"name":"editResponse","description":"Edits a response to the command message","access":"private","params":[{"name":"response","description":"The response message(s) to edit","type":[[["Message"]],[["Array","<"],["Message",">"]]]},{"name":"options","description":"Options for the response","optional":true,"type":[[["Object"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":435,"file":"context.js","path":"src/extensions"}},{"name":"editCurrentResponse","description":"Edits the current response","access":"private","params":[{"name":"id","description":"The ID of the channel the response is in (\"DM\" for direct messages)","type":[[["string"]]]},{"name":"options","description":"Options for the response","optional":true,"type":[[["Object"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":478,"file":"context.js","path":"src/extensions"}},{"name":"say","description":"Responds with a plain message","params":[{"name":"content","description":"Content for the message","type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":491,"file":"context.js","path":"src/extensions"}},{"name":"reply","description":"Responds with a reply message","params":[{"name":"content","description":"Content for the message","type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":505,"file":"context.js","path":"src/extensions"}},{"name":"direct","description":"Responds with a direct message","params":[{"name":"content","description":"Content for the message","type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":519,"file":"context.js","path":"src/extensions"}},{"name":"code","description":"Responds with a code message","params":[{"name":"lang","description":"Language for the code block","type":[[["string"]]]},{"name":"content","description":"Content for the message","type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":534,"file":"context.js","path":"src/extensions"}},{"name":"embed","description":"Responds with an embed","params":[{"name":"embed","description":"Embed to send","type":[[["RichEmbed"]],[["Object"]]]},{"name":"content","description":"Content for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":551,"file":"context.js","path":"src/extensions"}},{"name":"replyEmbed","description":"Responds with a mention + embed","params":[{"name":"embed","description":"Embed to send","type":[[["RichEmbed"]],[["Object"]]]},{"name":"content","description":"Content for the message","optional":true,"type":[[["StringResolvable"]]]},{"name":"options","description":"Options for the message","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<("],["Message","|"],["Array","<"],["Message",">)>"]]],"meta":{"line":564,"file":"context.js","path":"src/extensions"}},{"name":"finalize","description":"Finalizes the command message by setting the responses and deleting any remaining prior ones","access":"private","params":[{"name":"responses","description":"Responses to the message","nullable":true,"type":[[["Array","<("],["Message","|"],["Array","<"],["Message",">)>"]]]}],"meta":{"line":575,"file":"context.js","path":"src/extensions"}},{"name":"deleteRemainingResponses","description":"Deletes any prior responses that haven't been updated","access":"private","meta":{"line":601,"file":"context.js","path":"src/extensions"}},{"name":"extend","description":"Extends the message to be the 'context'","scope":"static","params":[{"name":"message","description":"the message to extend","type":[[["Message"]],[["Interaction"]]]}],"returns":[[["Context"]]],"meta":{"line":118,"file":"context.js","path":"src/extensions"}},{"name":"addExtender","description":"Adds an 'extender' to add custom properties to context for each message.\nCan easily break commando, only use when you know what you're doing, and don't change the default properties.","scope":"static","params":[{"name":"extender","description":"the extender function","type":[[["function"]]]}],"meta":{"line":132,"file":"context.js","path":"src/extensions"}},{"name":"parseArgs","description":"Parses an argument string into an array of arguments","scope":"static","params":[{"name":"argString","description":"The argument string to parse","type":[[["string"]]]},{"name":"argCount","description":"The number of arguments to extract from the string","optional":true,"type":[[["number"]]]},{"name":"allowSingleQuote","description":"Whether or not single quotes should be allowed to wrap arguments,\nin addition to double quotes","optional":true,"default":true,"type":[[["boolean"]]]}],"returns":{"types":[[["Array","<"],["string",">"]]],"description":"The array of arguments"},"meta":{"line":623,"file":"context.js","path":"src/extensions"}}],"meta":{"line":15,"file":"context.js","path":"src/extensions"}},{"name":"CommandoGuild","description":"A fancier Guild for fancier people.","props":[{"name":"settings","description":"Shortcut to use setting provider methods for this guild","type":[[["GuildSettingsHelper"]]],"meta":{"line":19,"file":"guild.js","path":"src/extensions"}},{"name":"_commandPrefix","description":"Internal command prefix for the guild, controlled by the {@link CommandoGuild#commandPrefix}\ngetter/setter","access":"private","nullable":true,"type":[[["string"]]],"meta":{"line":21,"file":"guild.js","path":"src/extensions"}},{"name":"commandPrefix","description":"Command prefix in the guild. An empty string indicates that there is no prefix, and only mentions will be used.\nSetting to `null` means that the prefix from {@link CommandoClient#commandPrefix} will be used instead.","type":[[["string"]]],"meta":{"line":58,"file":"guild.js","path":"src/extensions"}},{"name":"_commandsEnabled","description":"Map object of internal command statuses, mapped by command name","access":"private","type":[[["Object"]]],"meta":{"line":90,"file":"guild.js","path":"src/extensions"}},{"name":"_groupsEnabled","description":"Internal map object of group statuses, mapped by group ID","access":"private","type":[[["Object"]]],"meta":{"line":133,"file":"guild.js","path":"src/extensions"}}],"methods":[{"name":"setCommandEnabled","description":"Sets whether a command is enabled in the guild","params":[{"name":"command","description":"Command to set status of","type":[[["CommandResolvable"]]]},{"name":"enabled","description":"Whether the command should be enabled","type":[[["boolean"]]]}],"meta":{"line":79,"file":"guild.js","path":"src/extensions"}},{"name":"isCommandEnabled","description":"Checks whether a command is enabled in the guild (does not take the command's group status into account)","params":[{"name":"command","description":"Command to check status of","type":[[["CommandResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":108,"file":"guild.js","path":"src/extensions"}},{"name":"setGroupEnabled","description":"Sets whether a command group is enabled in the guild","params":[{"name":"group","description":"Group to set status of","type":[[["CommandGroupResolvable"]]]},{"name":"enabled","description":"Whether the group should be enabled","type":[[["boolean"]]]}],"meta":{"line":122,"file":"guild.js","path":"src/extensions"}},{"name":"isGroupEnabled","description":"Checks whether a command group is enabled in the guild","params":[{"name":"group","description":"Group to check status of","type":[[["CommandGroupResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":151,"file":"guild.js","path":"src/extensions"}},{"name":"commandUsage","description":"Creates a command usage string using the guild's prefix","params":[{"name":"command","description":"A command + arg string","optional":true,"type":[[["string"]]]},{"name":"user","description":"User to use for the mention command format","optional":true,"default":"this.client.user","type":[[["User"]]]}],"returns":[[["string"]]],"meta":{"line":164,"file":"guild.js","path":"src/extensions"}},{"name":"extend","description":"Extends the set guild, reuses from cache.","scope":"static","params":[{"name":"guild","description":"the guild to extend","type":[[["Guild"]]]}],"returns":[[["CommandoGuild"]]],"meta":{"line":36,"file":"guild.js","path":"src/extensions"}}],"meta":{"line":11,"file":"guild.js","path":"src/extensions"}},{"name":"SettingProvider","description":"Loads and stores settings associated with guilds","abstract":true,"methods":[{"name":"init","description":"Initialises the provider by connecting to databases and/or caching all data in memory.\n{@link CommandoClient#setProvider} will automatically call this once the client is ready.","abstract":true,"params":[{"name":"client","description":"Client that will be using the provider","type":[[["CommandoClient"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":20,"file":"base.js","path":"src/providers"}},{"name":"destroy","description":"Destroys the provider, removing any event listeners.","abstract":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":27,"file":"base.js","path":"src/providers"}},{"name":"get","description":"Obtains a setting for a guild","abstract":true,"params":[{"name":"guild","description":"Guild the setting is associated with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]},{"name":"defVal","description":"Value to default to if the setting isn't set on the guild","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":37,"file":"base.js","path":"src/providers"}},{"name":"set","description":"Sets a setting for a guild","abstract":true,"params":[{"name":"guild","description":"Guild to associate the setting with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]},{"name":"val","description":"Value of the setting","type":[["*"]]}],"returns":{"types":[[["Promise","<"],["*",">"]]],"description":"New value of the setting"},"meta":{"line":47,"file":"base.js","path":"src/providers"}},{"name":"remove","description":"Removes a setting from a guild","abstract":true,"params":[{"name":"guild","description":"Guild the setting is associated with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["*",">"]]],"description":"Old value of the setting"},"meta":{"line":56,"file":"base.js","path":"src/providers"}},{"name":"clear","description":"Removes all settings in a guild","abstract":true,"params":[{"name":"guild","description":"Guild to clear the settings of","type":[[["Guild"]],[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":64,"file":"base.js","path":"src/providers"}},{"name":"getGuildID","description":"Obtains the ID of the provided guild, or throws an error if it isn't valid","scope":"static","params":[{"name":"guild","description":"Guild to get the ID of","type":[[["Guild"]],[["string"]]]}],"returns":{"types":[[["string"]]],"description":"ID of the guild, or 'global'"},"meta":{"line":71,"file":"base.js","path":"src/providers"}}],"meta":{"line":8,"file":"base.js","path":"src/providers"}},{"name":"GuildSettingsHelper","description":"Helper class to use {@link SettingProvider} methods for a specific Guild","access":"private","construct":{"name":"GuildSettingsHelper","params":[{"name":"client","description":"Client to use the provider of","type":[[["CommandoClient"]]]},{"name":"guild","description":"Guild the settings are for","nullable":true,"type":[[["CommandoGuild"]]]}]},"props":[{"name":"client","description":"Client to use the provider of","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":9,"file":"helper.js","path":"src/providers"}},{"name":"guild","description":"Guild the settings are for","nullable":true,"type":[[["CommandoGuild"]]],"meta":{"line":21,"file":"helper.js","path":"src/providers"}}],"methods":[{"name":"get","description":"Gets a setting in the guild","see":["{@link SettingProvider#get}"],"params":[{"name":"key","description":"Name of the setting","type":[[["string"]]]},{"name":"defVal","description":"Value to default to if the setting isn't set","optional":true,"type":[["*"]]}],"returns":[[["Promise","<"],["*",">"]]],"meta":{"line":31,"file":"helper.js","path":"src/providers"}},{"name":"set","description":"Sets a setting for the guild","see":["{@link SettingProvider#set}"],"params":[{"name":"key","description":"Name of the setting","type":[[["string"]]]},{"name":"val","description":"Value of the setting","type":[["*"]]}],"returns":{"types":[[["Promise","<"],["*",">"]]],"description":"New value of the setting"},"meta":{"line":43,"file":"helper.js","path":"src/providers"}},{"name":"remove","description":"Removes a setting from the guild","see":["{@link SettingProvider#remove}"],"params":[{"name":"key","description":"Name of the setting","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["*",">"]]],"description":"Old value of the setting"},"meta":{"line":54,"file":"helper.js","path":"src/providers"}},{"name":"clear","description":"Removes all settings in the guild","see":["{@link SettingProvider#clear}"],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":64,"file":"helper.js","path":"src/providers"}}],"meta":{"line":2,"file":"helper.js","path":"src/providers"}},{"name":"SyncSQLiteProvider","description":"Uses an SQLite database to store settings with guilds","extends":[[["SettingProvider"]]],"construct":{"name":"SyncSQLiteProvider","params":[{"name":"conn","description":"Database Connection for the provider","type":[[["SyncSQLiteDatabase"]]]}]},"props":[{"name":"conn","description":"Database that will be used for storing/retrieving settings","type":[[["SyncSQLiteDatabase"]]],"meta":{"line":23,"file":"sqlite-sync.js","path":"src/providers"}},{"name":"client","description":"Client that the provider is for (set once the client is ready, after using {@link CommandoClient#setProvider})","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":25,"file":"sqlite-sync.js","path":"src/providers"}},{"name":"settings","description":"Settings cached in memory, mapped by guild ID (or 'global')","access":"private","type":[[["Map"]]],"meta":{"line":38,"file":"sqlite-sync.js","path":"src/providers"}},{"name":"listeners","description":"Listeners on the Client, mapped by the event name","access":"private","type":[[["Map"]]],"meta":{"line":45,"file":"sqlite-sync.js","path":"src/providers"}},{"name":"insertOrReplaceStmt","description":"Prepared statement to insert or replace a settings row","access":"private","type":[[["SyncSQLiteStatement"]]],"meta":{"line":52,"file":"sqlite-sync.js","path":"src/providers"}},{"name":"deleteStmt","description":"Prepared statement to delete an entire settings row","access":"private","type":[[["SyncSQLiteStatement"]]],"meta":{"line":59,"file":"sqlite-sync.js","path":"src/providers"}}],"methods":[{"name":"setupGuild","description":"Loads all settings for a guild","access":"private","params":[{"name":"guild","description":"Guild ID to load the settings of (or 'global')","type":[[["string"]]]},{"name":"settings","description":"Settings to load","type":[[["Object"]]]}],"meta":{"line":167,"file":"sqlite-sync.js","path":"src/providers"}},{"name":"setupGuildCommand","description":"Sets up a command's status in a guild from the guild's settings","access":"private","params":[{"name":"guild","description":"Guild to set the status in","nullable":true,"type":[[["CommandoGuild"]]]},{"name":"command","description":"Command to set the status of","type":[[["Command"]]]},{"name":"settings","description":"Settings of the guild","type":[[["Object"]]]}],"meta":{"line":189,"file":"sqlite-sync.js","path":"src/providers"}},{"name":"setupGuildGroup","description":"Sets up a command group's status in a guild from the guild's settings","access":"private","params":[{"name":"guild","description":"Guild to set the status in","nullable":true,"type":[[["CommandoGuild"]]]},{"name":"group","description":"Group to set the status of","type":[[["CommandGroup"]]]},{"name":"settings","description":"Settings of the guild","type":[[["Object"]]]}],"meta":{"line":206,"file":"sqlite-sync.js","path":"src/providers"}},{"name":"updateOtherShards","description":"Updates a global setting on all other shards if using the {@link ShardingManager}.","access":"private","params":[{"name":"key","description":"Key of the setting to update","type":[[["string"]]]},{"name":"val","description":"Value of the setting","type":[["*"]]}],"meta":{"line":222,"file":"sqlite-sync.js","path":"src/providers"}},{"name":"init","description":"Initialises the provider by connecting to databases and/or caching all data in memory.\n{@link CommandoClient#setProvider} will automatically call this once the client is ready.","inherits":"SettingProvider#init","inherited":true,"abstract":false,"params":[{"name":"client","description":"Client that will be using the provider","type":[[["CommandoClient"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":20,"file":"base.js","path":"src/providers"}},{"name":"destroy","description":"Destroys the provider, removing any event listeners.","inherits":"SettingProvider#destroy","inherited":true,"abstract":false,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":27,"file":"base.js","path":"src/providers"}},{"name":"get","description":"Obtains a setting for a guild","inherits":"SettingProvider#get","inherited":true,"abstract":false,"params":[{"name":"guild","description":"Guild the setting is associated with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]},{"name":"defVal","description":"Value to default to if the setting isn't set on the guild","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":37,"file":"base.js","path":"src/providers"}},{"name":"set","description":"Sets a setting for a guild","inherits":"SettingProvider#set","inherited":true,"abstract":false,"params":[{"name":"guild","description":"Guild to associate the setting with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]},{"name":"val","description":"Value of the setting","type":[["*"]]}],"returns":{"types":[[["Promise","<"],["*",">"]]],"description":"New value of the setting"},"meta":{"line":47,"file":"base.js","path":"src/providers"}},{"name":"remove","description":"Removes a setting from a guild","inherits":"SettingProvider#remove","inherited":true,"abstract":false,"params":[{"name":"guild","description":"Guild the setting is associated with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["*",">"]]],"description":"Old value of the setting"},"meta":{"line":56,"file":"base.js","path":"src/providers"}},{"name":"clear","description":"Removes all settings in a guild","inherits":"SettingProvider#clear","inherited":true,"abstract":false,"params":[{"name":"guild","description":"Guild to clear the settings of","type":[[["Guild"]],[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":64,"file":"base.js","path":"src/providers"}}],"meta":{"line":7,"file":"sqlite-sync.js","path":"src/providers"}},{"name":"SQLiteProvider","description":"Uses an SQLite database to store settings with guilds","extends":[[["SettingProvider"]]],"construct":{"name":"SQLiteProvider","params":[{"name":"db","description":"Database for the provider","type":[[["SQLiteDatabase"]]]}]},"props":[{"name":"db","description":"Database that will be used for storing/retrieving settings","type":[[["SQLiteDatabase"]]],"meta":{"line":23,"file":"sqlite.js","path":"src/providers"}},{"name":"client","description":"Client that the provider is for (set once the client is ready, after using {@link CommandoClient#setProvider})","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":25,"file":"sqlite.js","path":"src/providers"}},{"name":"settings","description":"Settings cached in memory, mapped by guild ID (or 'global')","access":"private","type":[[["Map"]]],"meta":{"line":38,"file":"sqlite.js","path":"src/providers"}},{"name":"listeners","description":"Listeners on the Client, mapped by the event name","access":"private","type":[[["Map"]]],"meta":{"line":45,"file":"sqlite.js","path":"src/providers"}},{"name":"insertOrReplaceStmt","description":"Prepared statement to insert or replace a settings row","access":"private","type":[[["SQLiteStatement"]]],"meta":{"line":52,"file":"sqlite.js","path":"src/providers"}},{"name":"deleteStmt","description":"Prepared statement to delete an entire settings row","access":"private","type":[[["SQLiteStatement"]]],"meta":{"line":59,"file":"sqlite.js","path":"src/providers"}}],"methods":[{"name":"setupGuild","description":"Loads all settings for a guild","access":"private","params":[{"name":"guild","description":"Guild ID to load the settings of (or 'global')","type":[[["string"]]]},{"name":"settings","description":"Settings to load","type":[[["Object"]]]}],"meta":{"line":177,"file":"sqlite.js","path":"src/providers"}},{"name":"setupGuildCommand","description":"Sets up a command's status in a guild from the guild's settings","access":"private","params":[{"name":"guild","description":"Guild to set the status in","nullable":true,"type":[[["CommandoGuild"]]]},{"name":"command","description":"Command to set the status of","type":[[["Command"]]]},{"name":"settings","description":"Settings of the guild","type":[[["Object"]]]}],"meta":{"line":199,"file":"sqlite.js","path":"src/providers"}},{"name":"setupGuildGroup","description":"Sets up a command group's status in a guild from the guild's settings","access":"private","params":[{"name":"guild","description":"Guild to set the status in","nullable":true,"type":[[["CommandoGuild"]]]},{"name":"group","description":"Group to set the status of","type":[[["CommandGroup"]]]},{"name":"settings","description":"Settings of the guild","type":[[["Object"]]]}],"meta":{"line":216,"file":"sqlite.js","path":"src/providers"}},{"name":"updateOtherShards","description":"Updates a global setting on all other shards if using the {@link ShardingManager}.","access":"private","params":[{"name":"key","description":"Key of the setting to update","type":[[["string"]]]},{"name":"val","description":"Value of the setting","type":[["*"]]}],"meta":{"line":232,"file":"sqlite.js","path":"src/providers"}},{"name":"init","description":"Initialises the provider by connecting to databases and/or caching all data in memory.\n{@link CommandoClient#setProvider} will automatically call this once the client is ready.","inherits":"SettingProvider#init","inherited":true,"abstract":false,"params":[{"name":"client","description":"Client that will be using the provider","type":[[["CommandoClient"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":20,"file":"base.js","path":"src/providers"}},{"name":"destroy","description":"Destroys the provider, removing any event listeners.","inherits":"SettingProvider#destroy","inherited":true,"abstract":false,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":27,"file":"base.js","path":"src/providers"}},{"name":"get","description":"Obtains a setting for a guild","inherits":"SettingProvider#get","inherited":true,"abstract":false,"params":[{"name":"guild","description":"Guild the setting is associated with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]},{"name":"defVal","description":"Value to default to if the setting isn't set on the guild","optional":true,"type":[["*"]]}],"returns":[["*"]],"meta":{"line":37,"file":"base.js","path":"src/providers"}},{"name":"set","description":"Sets a setting for a guild","inherits":"SettingProvider#set","inherited":true,"abstract":false,"params":[{"name":"guild","description":"Guild to associate the setting with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]},{"name":"val","description":"Value of the setting","type":[["*"]]}],"returns":{"types":[[["Promise","<"],["*",">"]]],"description":"New value of the setting"},"meta":{"line":47,"file":"base.js","path":"src/providers"}},{"name":"remove","description":"Removes a setting from a guild","inherits":"SettingProvider#remove","inherited":true,"abstract":false,"params":[{"name":"guild","description":"Guild the setting is associated with (or 'global')","type":[[["Guild"]],[["string"]]]},{"name":"key","description":"Name of the setting","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["*",">"]]],"description":"Old value of the setting"},"meta":{"line":56,"file":"base.js","path":"src/providers"}},{"name":"clear","description":"Removes all settings in a guild","inherits":"SettingProvider#clear","inherited":true,"abstract":false,"params":[{"name":"guild","description":"Guild to clear the settings of","type":[[["Guild"]],[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":64,"file":"base.js","path":"src/providers"}}],"meta":{"line":7,"file":"sqlite.js","path":"src/providers"}},{"name":"ArgumentType","description":"A type for command arguments","construct":{"name":"ArgumentType","params":[{"name":"client","description":"The client the argument type is for","type":[[["CommandoClient"]]]},{"name":"id","description":"The argument type ID (this is what you specify in {@link ArgumentInfo#type})","type":[[["string"]]]},{"name":"slash","description":"Options for slash commands usage. Omit when not using slash commands.","default":null,"type":[[["SlashOptions"]]]}]},"props":[{"name":"client","description":"Client that this argument type is for","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":30,"file":"base.js","path":"src/types"}},{"name":"id","description":"ID of this argument type (this is what you specify in {@link ArgumentInfo#type})","type":[[["string"]]],"meta":{"line":42,"file":"base.js","path":"src/types"}},{"name":"slash","description":"Slash commands options.","type":[[["SlashOptions"]]],"meta":{"line":48,"file":"base.js","path":"src/types"}}],"methods":[{"name":"autocomplete","description":"Runs when there's a request for autocomplete (if it has been enabled in slash options).","params":[{"name":"interaction","description":"The autocomplete interaction from discord.js","type":[[["AutocompleteInteraction"]]]}],"meta":{"line":55,"file":"base.js","path":"src/types"}},{"name":"commandConvert","description":"Runs in slash commands, to convert the value from discord API to the desired value.","params":[{"name":"val","description":"-","type":[[["any"]]]}],"returns":[[["any"]]],"meta":{"line":64,"file":"base.js","path":"src/types"}},{"name":"validate","description":"Validates a value string against the type","abstract":true,"params":[{"name":"val","description":"Value to validate","type":[[["string"]]]},{"name":"msg","description":"Message the value was obtained from","type":[[["CommandoMessage"]]]},{"name":"arg","description":"Argument the value was obtained from","type":[[["Argument"]]]}],"returns":{"types":[[["boolean"]],[["string"]],[["Promise","<("],["boolean","|"],["string",")>"]]],"description":"Whether the value is valid, or an error message"},"meta":{"line":77,"file":"base.js","path":"src/types"}},{"name":"parse","description":"Parses the raw value string into a usable value","abstract":true,"params":[{"name":"val","description":"Value to parse","type":[[["string"]]]},{"name":"msg","description":"Message the value was obtained from","type":[[["CommandoMessage"]]]},{"name":"arg","description":"Argument the value was obtained from","type":[[["Argument"]]]}],"returns":{"types":[["*"],[["Promise","<"],["*",">"]]],"description":"Usable value"},"meta":{"line":90,"file":"base.js","path":"src/types"}},{"name":"isEmpty","description":"Checks whether a value is considered to be empty. This determines whether the default value for an argument\nshould be used and changes the response to the user under certain circumstances.","params":[{"name":"val","description":"Value to check for emptiness","type":[[["string"]]]},{"name":"msg","description":"Message the value was obtained from","type":[[["CommandoMessage"]]]},{"name":"arg","description":"Argument the value was obtained from","type":[[["Argument"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether the value is empty"},"meta":{"line":102,"file":"base.js","path":"src/types"}}],"meta":{"line":19,"file":"base.js","path":"src/types"}},{"name":"ArgumentUnionType","description":"A type for command arguments that handles multiple other types","extends":[[["ArgumentType"]]],"props":[{"name":"types","description":"Types to handle, in order of priority","type":[[["Array","<"],["ArgumentType",">"]]],"meta":{"line":15,"file":"union.js","path":"src/types"}},{"name":"client","description":"Client that this argument type is for","readonly":true,"type":[[["CommandoClient"]]],"meta":{"line":30,"file":"base.js","path":"src/types"}},{"name":"id","description":"ID of this argument type (this is what you specify in {@link ArgumentInfo#type})","type":[[["string"]]],"meta":{"line":42,"file":"base.js","path":"src/types"}},{"name":"slash","description":"Slash commands options.","type":[[["SlashOptions"]]],"meta":{"line":48,"file":"base.js","path":"src/types"}}],"methods":[{"name":"autocomplete","description":"Runs when there's a request for autocomplete (if it has been enabled in slash options).","inherits":"ArgumentType#autocomplete","inherited":true,"params":[{"name":"interaction","description":"The autocomplete interaction from discord.js","type":[[["AutocompleteInteraction"]]]}],"meta":{"line":55,"file":"base.js","path":"src/types"}},{"name":"commandConvert","description":"Runs in slash commands, to convert the value from discord API to the desired value.","inherits":"ArgumentType#commandConvert","inherited":true,"params":[{"name":"val","description":"-","type":[[["any"]]]}],"returns":[[["any"]]],"meta":{"line":64,"file":"base.js","path":"src/types"}},{"name":"validate","description":"Validates a value string against the type","inherits":"ArgumentType#validate","inherited":true,"abstract":false,"params":[{"name":"val","description":"Value to validate","type":[[["string"]]]},{"name":"msg","description":"Message the value was obtained from","type":[[["CommandoMessage"]]]},{"name":"arg","description":"Argument the value was obtained from","type":[[["Argument"]]]}],"returns":{"types":[[["boolean"]],[["string"]],[["Promise","<("],["boolean","|"],["string",")>"]]],"description":"Whether the value is valid, or an error message"},"meta":{"line":77,"file":"base.js","path":"src/types"}},{"name":"parse","description":"Parses the raw value string into a usable value","inherits":"ArgumentType#parse","inherited":true,"abstract":false,"params":[{"name":"val","description":"Value to parse","type":[[["string"]]]},{"name":"msg","description":"Message the value was obtained from","type":[[["CommandoMessage"]]]},{"name":"arg","description":"Argument the value was obtained from","type":[[["Argument"]]]}],"returns":{"types":[["*"],[["Promise","<"],["*",">"]]],"description":"Usable value"},"meta":{"line":90,"file":"base.js","path":"src/types"}},{"name":"isEmpty","description":"Checks whether a value is considered to be empty. This determines whether the default value for an argument\nshould be used and changes the response to the user under certain circumstances.","inherits":"ArgumentType#isEmpty","inherited":true,"params":[{"name":"val","description":"Value to check for emptiness","type":[[["string"]]]},{"name":"msg","description":"Message the value was obtained from","type":[[["CommandoMessage"]]]},{"name":"arg","description":"Argument the value was obtained from","type":[[["Argument"]]]}],"returns":{"types":[[["boolean"]]],"description":"Whether the value is empty"},"meta":{"line":102,"file":"base.js","path":"src/types"}}],"meta":{"line":7,"file":"union.js","path":"src/types"}}],"interfaces":[],"typedefs":[{"name":"ThrottleResult","description":"Result of throttle function, returned when the command should be blocked","type":[[["object"]]],"props":[{"name":"throttle","type":[[["Object"]]]},{"name":"remaining","description":"remaining seconds","type":[[["number"]]]}],"meta":{"line":12,"file":"client.js","path":"src"}},{"name":"Throttle","description":"Throttles the command usage","type":[[["function"]]],"params":[{"name":"command","description":"Command to throttle","type":[[["Command"]]]},{"name":"user","description":"The user that triggered the command","type":[[["User"]]]}],"returns":{"types":[[["Promise","<?"],["ThrottleResult",">"]]],"description":"- Whether to throttle the use or allow the command to run"},"meta":{"line":23,"file":"client.js","path":"src"}},{"name":"ThrottleUse","description":"Updates the throttle database after command use","type":[[["function"]]],"params":[{"name":"command","description":"Command to throttle","type":[[["Command"]]]},{"name":"user","description":"The user that triggered the command","type":[[["User"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":30,"file":"client.js","path":"src"}},{"name":"CommandoClientOptions","description":"Options for a CommandoClient","type":[[["ClientOptions"]]],"props":[{"name":"commandPrefix","description":"Default command prefix","optional":true,"default":"!","type":[[["string"]]]},{"name":"commandEditableDuration","description":"Time in seconds that command messages should be editable","optional":true,"default":30,"type":[[["number"]]]},{"name":"nonCommandEditable","description":"Whether messages without commands can be edited to a command","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"owner","description":"ID of the bot owner's Discord user, or multiple IDs","optional":true,"type":[[["string"]],[["Array","<"],["string",">"]],[["Set","<"],["string",">"]]]},{"name":"invite","description":"Invite URL to the bot's support server","optional":true,"type":[[["string"]]]},{"name":"noErrorReply","description":"True if errors shouldn't send a message\n(useful when using custom error handlers)","optional":true,"type":[[["boolean"]]]},{"name":"ignorePermissions","description":"True to not check for user permissions.\nUseful when using custom inhibitors.","optional":true,"type":[[["boolean"]]]},{"name":"throttle","description":"Used for custom throttling.\nWhen object is returned, commando blocks the use of command.","optional":true,"type":[[["Throttle"]]]},{"name":"throttleUse","description":"Used for custom throttling.\nCalled when the command is used,should increase the counter.","optional":true,"type":[[["ThrottleUse"]]]}],"meta":{"line":38,"file":"client.js","path":"src"}},{"name":"Inhibition","type":[[["Object"]]],"props":[{"name":"reason","description":"Identifier for the reason the command is being blocked","type":[[["string"]]]},{"name":"response","description":"Response being sent to the user","type":[[["Promise","<"],["Message",">"]],[["Message"]]]}],"meta":{"line":54,"file":"dispatcher.js","path":"src"}},{"name":"Inhibitor","description":"A function that decides whether the usage of a command should be blocked","type":[[["function"]]],"params":[{"name":"msg","description":"Message triggering the command","type":[[["CommandoMessage"]]]}],"returns":{"types":[[["boolean"]],[["string"]],[["Inhibition"]]],"description":"`false` if the command should *not* be blocked.\nIf the command *should* be blocked, then one of the following:\n- A single string identifying the reason the command is blocked\n- An Inhibition object"},"meta":{"line":60,"file":"dispatcher.js","path":"src"}},{"name":"CommandGroupResolvable","description":"A CommandGroupResolvable can be:\n* A CommandGroup\n* A group ID","type":[[["CommandGroup"]],[["string"]]],"meta":{"line":520,"file":"registry.js","path":"src"}},{"name":"CommandResolvable","description":"A CommandResolvable can be:\n* A Command\n* A command name\n* A CommandoMessage","type":[[["Command"]],[["string"]]],"meta":{"line":580,"file":"registry.js","path":"src"}},{"name":"StringResolvable","description":"Data that can be resolved to give a string. This can be:\n* A string\n* An array (joined with a new line delimiter to give a string)\n* Any value","type":[[["string"]],[["Array"]],["*"]],"meta":{"line":81,"file":"util.js","path":"src"}},{"name":"ArgumentInfo","type":[[["Object"]]],"props":[{"name":"key","description":"Key for the argument","type":[[["string"]]]},{"name":"label","description":"Label for the argument","optional":true,"default":"key","type":[[["string"]]]},{"name":"prompt","description":"First prompt for the argument when it wasn't specified","type":[[["string"]]]},{"name":"error","description":"Predefined error message to output for the argument when it isn't valid","optional":true,"type":[[["string"]]]},{"name":"type","description":"Type of the argument (must be the ID of one of the registered argument types\nor multiple IDs in order of priority separated by `|` for a union type - see\n{@link CommandoRegistry#registerDefaultTypes} for the built-in types)","optional":true,"type":[[["string"]]]},{"name":"max","description":"If type is `integer` or `float`, this is the maximum value of the number.\nIf type is `string`, this is the maximum length of the string.","optional":true,"type":[[["number"]]]},{"name":"min","description":"If type is `integer` or `float`, this is the minimum value of the number.\nIf type is `string`, this is the minimum length of the string.","optional":true,"type":[[["number"]]]},{"name":"default","description":"Default value for the argument (makes the arg optional - cannot be `null`)","optional":true,"type":[[["ArgumentDefault"]]]},{"name":"oneOf","description":"An array of values that are allowed to be used","optional":true,"type":[[["Array","<"],["string",">"]]]},{"name":"infinite","description":"Whether the argument accepts infinite values","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"validate","description":"Validator function for the argument (see {@link ArgumentType#validate})","optional":true,"type":[[["function"]]]},{"name":"parse","description":"Parser function for the argument (see {@link ArgumentType#parse})","optional":true,"type":[[["function"]]]},{"name":"isEmpty","description":"Empty checker for the argument (see {@link ArgumentType#isEmpty})","optional":true,"type":[[["function"]]]},{"name":"autocomplete","description":"If a slash command with enabled autocomplete,\nthis function should reply with the options.","optional":true,"type":[[["function"]]]},{"name":"wait","description":"How long to wait for input (in seconds)","optional":true,"default":30,"type":[[["number"]]]}],"meta":{"line":7,"file":"argument.js","path":"src/commands"}},{"name":"ArgumentDefault","description":"Either a value or a function that returns a value. The function is passed the CommandoMessage and the Argument.","type":[["*"],[["function"]]],"meta":{"line":31,"file":"argument.js","path":"src/commands"}},{"name":"ArgumentResult","description":"Result object from obtaining a single {@link Argument}'s value(s)","type":[[["Object"]]],"props":[{"name":"value","description":"Final value(s) for the argument","type":[["*"],[["Array","<"],["*",">"]]]},{"name":"cancelled","description":"One of:\n- `user` (user cancelled)\n- `time` (wait time exceeded)\n- `promptLimit` (prompt limit exceeded)","nullable":true,"type":[[["string"]]]},{"name":"prompts","description":"All messages that were sent to prompt the user","type":[[["Array","<"],["Message",">"]]]},{"name":"answers","description":"All of the user's messages that answered a prompt","type":[[["Array","<"],["Message",">"]]]}],"meta":{"line":148,"file":"argument.js","path":"src/commands"}},{"name":"ThrottlingOptions","type":[[["Object"]]],"props":[{"name":"usages","description":"Maximum number of usages of the command allowed in the time frame.","type":[[["number"]]]},{"name":"duration","description":"Amount of time to count the usages of the command within (in seconds).","type":[[["number"]]]}],"meta":{"line":9,"file":"base.js","path":"src/commands"}},{"name":"CommandInfo","type":[[["Object"]]],"props":[{"name":"name","description":"The name of the command (must be lowercase)","type":[[["string"]]]},{"name":"aliases","description":"Alternative names for the command (all must be lowercase)","optional":true,"type":[[["Array","<"],["string",">"]]]},{"name":"autoAliases","description":"Whether automatic aliases should be added","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"group","description":"The ID of the group the command belongs to (must be lowercase)","type":[[["string"]]]},{"name":"memberName","description":"The member name of the command in the group (must be lowercase)","type":[[["string"]]]},{"name":"description","description":"A short description of the command","type":[[["string"]]]},{"name":"format","description":"The command usage format string - will be automatically generated if not specified,\nand `args` is specified","optional":true,"type":[[["string"]]]},{"name":"details","description":"A detailed description of the command and its functionality","optional":true,"type":[[["string"]]]},{"name":"examplesName","description":"Title of examples in help command","optional":true,"default":"\"examples\"","type":[[["string"]]]},{"name":"examples","description":"Usage examples of the command","optional":true,"type":[[["Array","<"],["string",">"]]]},{"name":"guildOnly","description":"Whether or not the command should only function in a guild channel","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"ownerOnly","description":"Whether or not the command is usable only by an owner","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"clientPermissions","description":"Permissions required by the client to use the command.","optional":true,"type":[[["Array","<"],["PermissionResolvable",">"]]]},{"name":"userPermissions","description":"Permissions required by the user to use the command.","optional":true,"type":[[["Array","<"],["PermissionResolvable",">"]]]},{"name":"nsfw","description":"Whether the command is usable only in NSFW channels.","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"throttling","description":"Options for throttling usages of the command.","optional":true,"type":[[["ThrottlingOptions"]]]},{"name":"defaultHandling","description":"Whether or not the default command handling should be used.\nIf false, then only patterns will trigger the command.","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"args","description":"Arguments for the command.","optional":true,"type":[[["Array","<"],["ArgumentInfo",">"]]]},{"name":"argsPromptLimit","description":"Maximum number of times to prompt a user for a single argument.\nOnly applicable if `args` is specified.","optional":true,"default":"Infinity","type":[[["number"]]]},{"name":"argsType","description":"One of 'single' or 'multiple'. Only applicable if `args` is not specified.\nWhen 'single', the entire argument string will be passed to run as one argument.\nWhen 'multiple', it will be passed as multiple arguments.","optional":true,"default":"single","type":[[["string"]]]},{"name":"argsCount","description":"The number of arguments to parse from the command string.\nOnly applicable when argsType is 'multiple'. If nonzero, it should be at least 2.\nWhen this is 0, the command argument string will be split into as many arguments as it can be.\nWhen nonzero, it will be split into a maximum of this number of arguments.","optional":true,"default":0,"type":[[["number"]]]},{"name":"argsSingleQuotes","description":"Whether or not single quotes should be allowed to box-in arguments\nin the command string.","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"patterns","description":"Patterns to use for triggering the command","optional":true,"type":[[["Array","<"],["RegExp",">"]]]},{"name":"guarded","description":"Whether the command should be protected from disabling","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"hidden","description":"Whether the command should be hidden from the help command","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"unknown","description":"Whether the command should be run when an unknown command is used - there\nmay only be one command registered with this property as `true`.","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"command","description":"Whether the command is a discord command (slash\ncommand, message right click or user right click command)","optional":true,"default":false,"type":[[["boolean"]],[["slash","\""]],[["message","\""]],[["user","\""]]]},{"name":"commandOnly","description":"Whether the command can be triggered only by the discord version or\npatterns or if default message handling should apply.","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":15,"file":"base.js","path":"src/commands"}},{"name":"ArgumentCollectorResult","description":"Result object from obtaining argument values from an {@link ArgumentCollector}","type":[[["Object"]]],"props":[{"name":"values","description":"Final values for the arguments, mapped by their keys","nullable":true,"type":[[["Object"]]]},{"name":"cancelled","description":"One of:\n- `user` (user cancelled)\n- `time` (wait time exceeded)\n- `promptLimit` (prompt limit exceeded)","nullable":true,"type":[[["string"]]]},{"name":"prompts","description":"All messages that were sent to prompt the user","type":[[["Array","<"],["Message",">"]]]},{"name":"answers","description":"All of the user's messages that answered a prompt","type":[[["Array","<"],["Message",">"]]]}],"meta":{"line":46,"file":"collector.js","path":"src/commands"}},{"name":"SlashOptionsChoice","type":[[["Object"]]],"props":[{"name":"name","description":"the name (shown to the user)","type":[[["string"]]]},{"name":"value","description":"the value (what's received in the interaction)","type":[[["string"]]]}],"meta":{"line":1,"file":"base.js","path":"src/types"}},{"name":"SlashOptions","type":[[["Object"]]],"props":[{"name":"type","description":"The option type","type":[[["ApplicationCommandOptionType"]]]},{"name":"name","description":"the name of the slash option, defaults to key of argument","optional":true,"type":[[["string"]]]},{"name":"description","description":"The description of the slash option, defaults to prompt of argument","optional":true,"type":[[["string"]]]},{"name":"required","description":"whether the argument is required","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"autocomplete","description":"whether autocomplete is enabled","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"choices","description":"the choices available to the user (if limited)","optional":true,"type":[[["Array","<"],["SlashOptionsChoice",">"]]]},{"name":"options","description":"Additional options when this is a subcommand (group)","optional":true,"type":[[["Array","<"],["SlashOptions",">"]]]},{"name":"channelTypes","description":"Allowed channel types when this is channel type","optional":true,"type":[[["ChannelType"]]]}],"meta":{"line":6,"file":"base.js","path":"src/types"}}],"externals":[{"name":"Channel","see":["{@link https://discord.js.org/#/docs/main/master/class/Channel}"],"meta":{"line":29,"file":"index.js","path":"src"}},{"name":"Client","see":["{@link https://discord.js.org/#/docs/main/master/class/Client}"],"meta":{"line":33,"file":"index.js","path":"src"}},{"name":"ClientOptions","see":["{@link https://discord.js.org/#/docs/main/master/typedef/ClientOptions}"],"meta":{"line":37,"file":"index.js","path":"src"}},{"name":"Collection","see":["{@link https://discord.js.org/#/docs/main/master/class/Collection}"],"meta":{"line":41,"file":"index.js","path":"src"}},{"name":"DMChannel","see":["{@link https://discord.js.org/#/docs/main/master/class/DMChannel}"],"meta":{"line":45,"file":"index.js","path":"src"}},{"name":"Guild","see":["{@link https://discord.js.org/#/docs/main/master/class/Guild}"],"meta":{"line":49,"file":"index.js","path":"src"}},{"name":"GuildMember","see":["{@link https://discord.js.org/#/docs/main/master/class/GuildMember}"],"meta":{"line":53,"file":"index.js","path":"src"}},{"name":"GuildResolvable","see":["{@link https://discord.js.org/#/docs/main/master/typedef/GuildResolvable}"],"meta":{"line":57,"file":"index.js","path":"src"}},{"name":"Message","see":["{@link https://discord.js.org/#/docs/main/master/class/Message}"],"meta":{"line":61,"file":"index.js","path":"src"}},{"name":"MessageAttachment","see":["{@link https://discord.js.org/#/docs/main/master/class/MessageAttachment}"],"meta":{"line":65,"file":"index.js","path":"src"}},{"name":"MessageEmbed","see":["{@link https://discord.js.org/#/docs/main/master/class/MessageEmbed}"],"meta":{"line":117,"file":"index.js","path":"src"}},{"name":"MessageReaction","see":["{@link https://discord.js.org/#/docs/main/master/class/MessageReaction}"],"meta":{"line":73,"file":"index.js","path":"src"}},{"name":"MessageOptions","see":["{@link https://discord.js.org/#/docs/main/master/typedef/MessageOptions}"],"meta":{"line":77,"file":"index.js","path":"src"}},{"name":"PermissionResolvable","see":["{@link https://discord.js.org/#/docs/main/master/typedef/PermissionResolvable}"],"meta":{"line":81,"file":"index.js","path":"src"}},{"name":"Role","see":["{@link https://discord.js.org/#/docs/main/master/class/Role}"],"meta":{"line":85,"file":"index.js","path":"src"}},{"name":"StringResolvable","see":["{@link https://discord.js.org/#/docs/main/master/typedef/StringResolvable}"],"meta":{"line":89,"file":"index.js","path":"src"}},{"name":"TextChannel","see":["{@link https://discord.js.org/#/docs/main/master/class/TextChannel}"],"meta":{"line":93,"file":"index.js","path":"src"}},{"name":"User","see":["{@link https://discord.js.org/#/docs/main/master/class/User}"],"meta":{"line":97,"file":"index.js","path":"src"}},{"name":"UserResolvable","see":["{@link https://discord.js.org/#/docs/main/master/class/UserResolvable}"],"meta":{"line":101,"file":"index.js","path":"src"}},{"name":"Emoji","see":["{@link https://discord.js.org/#/docs/main/master/class/Emoji}"],"meta":{"line":105,"file":"index.js","path":"src"}},{"name":"ReactionEmoji","see":["{@link https://discord.js.org/#/docs/main/master/class/ReactionEmoji}"],"meta":{"line":109,"file":"index.js","path":"src"}},{"name":"Webhook","see":["{@link https://discord.js.org/#/docs/main/master/class/Webhook}"],"meta":{"line":113,"file":"index.js","path":"src"}},{"name":"ShardingManager","see":["{@link https://discord.js.org/#/docs/main/master/class/ShardingManager}"],"meta":{"line":121,"file":"index.js","path":"src"}},{"name":"RequireAllOptions","see":["{@link https://www.npmjs.com/package/require-all}"],"meta":{"line":125,"file":"index.js","path":"src"}},{"name":"SyncSQLiteDatabase","see":["{@link https://www.npmjs.com/package/better-sqlite3}"],"meta":{"line":8,"file":"sqlite-sync.js","path":"src/providers"}},{"name":"SQLiteDatabase","see":["{@link https://www.npmjs.com/package/sqlite}"],"meta":{"line":8,"file":"sqlite.js","path":"src/providers"}}]}